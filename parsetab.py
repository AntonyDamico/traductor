
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftASSIGNNEleftGELELTGTleftPLUSMINUSleftTIMESDIVIDEMODrightNOTleftINCREMENTDECREMENTAND ASSIGN COMMA DECREMENT DIVIDE ELSE END_LINE EQUALS FALSE FOR FUNCTION GE GT ID IF INCREMENT LBRACKET LE LPAREN LT MINUS MOD NE NOT NUMBER OR PLUS RBRACKET RETURN RPAREN STRINGS TIMES TRUE VAR WHILE WRITES : statement S\n         | statement END_LINE S\n         S : statement END_LINE\n                 | statementstatement : commandstatement : declarationsstatement : exprdeclarations : VAR ID ASSIGN expr\n                    | VAR ID ASSIGN relexpr\n                    | VAR IDcommand : WRITE LPAREN expr RPARENcommand : WHILE LPAREN expr RPAREN LBRACKET S RBRACKET\n               | WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET command : FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET\n     command : IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET\n                    | IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET ELSE command\n                    | IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET ELSE LBRACKET S RBRACKET expr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n            | expr MOD exprexpr : expr INCREMENT\n            | expr DECREMENTexpr : ID ASSIGN exprexpr : NUMBERexpr : STRINGSexpr : ID\n            | TRUE\n            | FALSErelexpr : expr LT expr\n               | expr LE expr\n               | expr GT expr\n               | expr GE expr\n               | expr EQUALS expr\n               | expr NE expr\n               | NOT exprrelexprgroup : relexpr AND relexprgroup\n                    | relexpr OR relexprgroup\n                    | relexpr\n                    | expr\n    '
    
_lr_action_items = {'NUMBER':([0,1,3,4,5,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,33,37,38,42,43,44,45,46,48,49,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,73,78,80,81,83,86,87,88,91,92,],[1,-26,-29,-27,1,-28,-30,-7,-6,-5,1,1,1,-10,1,1,1,1,1,-23,-24,1,1,1,1,-25,-21,-20,-18,-19,-22,1,1,1,1,1,1,-37,1,-11,-9,-8,1,1,1,-35,-33,1,-31,-32,-34,-36,1,1,-13,-12,-15,1,1,-16,-14,-17,]),'LBRACKET':([47,50,60,84,85,],[63,66,73,86,87,]),'WHILE':([0,1,3,4,5,10,12,13,14,15,18,21,27,28,38,42,43,44,45,46,55,57,58,59,63,64,65,66,67,68,69,70,73,80,81,83,85,86,87,88,91,92,],[2,-26,-29,-27,2,-28,-30,-7,-6,-5,2,-10,-23,-24,-25,-21,-20,-18,-19,-22,-37,-11,-9,-8,2,-35,-33,2,-31,-32,-34,-36,2,-13,-12,-15,2,2,2,-16,-14,-17,]),'TRUE':([0,1,3,4,5,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,33,37,38,42,43,44,45,46,48,49,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,73,78,80,81,83,86,87,88,91,92,],[3,-26,-29,-27,3,-28,-30,-7,-6,-5,3,3,3,-10,3,3,3,3,3,-23,-24,3,3,3,3,-25,-21,-20,-18,-19,-22,3,3,3,3,3,3,-37,3,-11,-9,-8,3,3,3,-35,-33,3,-31,-32,-34,-36,3,3,-13,-12,-15,3,3,-16,-14,-17,]),'MINUS':([1,3,4,10,12,13,27,28,32,36,38,41,42,43,44,45,46,55,59,64,65,67,68,69,70,72,82,],[-26,-29,-27,-28,-30,29,-23,-24,29,29,29,29,-21,-20,-18,-19,-22,29,29,29,29,29,29,29,29,29,29,]),'LE':([1,3,4,10,12,27,28,32,38,41,42,43,44,45,46,59,72,],[-26,-29,-27,-28,-30,-23,-24,52,-25,52,-21,-20,-18,-19,-22,52,52,]),'RPAREN':([1,3,4,10,12,27,28,31,32,36,38,39,40,41,42,43,44,45,46,55,64,65,67,68,69,70,74,75,82,],[-26,-29,-27,-28,-30,-23,-24,47,50,57,-25,60,-40,-41,-21,-20,-18,-19,-22,-37,-35,-33,-31,-32,-34,-36,-38,-39,84,]),'NE':([1,3,4,10,12,27,28,32,38,41,42,43,44,45,46,59,72,],[-26,-29,-27,-28,-30,-23,-24,54,-25,54,-21,-20,-18,-19,-22,54,54,]),'STRINGS':([0,1,3,4,5,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,33,37,38,42,43,44,45,46,48,49,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,73,78,80,81,83,86,87,88,91,92,],[4,-26,-29,-27,4,-28,-30,-7,-6,-5,4,4,4,-10,4,4,4,4,4,-23,-24,4,4,4,4,-25,-21,-20,-18,-19,-22,4,4,4,4,4,4,-37,4,-11,-9,-8,4,4,4,-35,-33,4,-31,-32,-34,-36,4,4,-13,-12,-15,4,4,-16,-14,-17,]),'LT':([1,3,4,10,12,27,28,32,38,41,42,43,44,45,46,59,72,],[-26,-29,-27,-28,-30,-23,-24,51,-25,51,-21,-20,-18,-19,-22,51,51,]),'PLUS':([1,3,4,10,12,13,27,28,32,36,38,41,42,43,44,45,46,55,59,64,65,67,68,69,70,72,82,],[-26,-29,-27,-28,-30,26,-23,-24,26,26,26,26,-21,-20,-18,-19,-22,26,26,26,26,26,26,26,26,26,26,]),'INCREMENT':([1,3,4,10,12,13,27,28,32,36,38,41,42,43,44,45,46,55,59,64,65,67,68,69,70,72,82,],[-26,-29,-27,-28,-30,27,-23,-24,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'ASSIGN':([10,21,],[22,37,]),'$end':([1,3,4,5,8,10,12,13,14,15,17,18,21,27,28,34,38,42,43,44,45,46,55,57,58,59,64,65,67,68,69,70,80,81,83,88,91,92,],[-26,-29,-27,-4,0,-28,-30,-7,-6,-5,-1,-3,-10,-23,-24,-2,-25,-21,-20,-18,-19,-22,-37,-11,-9,-8,-35,-33,-31,-32,-34,-36,-13,-12,-15,-16,-14,-17,]),'GT':([1,3,4,10,12,27,28,32,38,41,42,43,44,45,46,59,72,],[-26,-29,-27,-28,-30,-23,-24,49,-25,49,-21,-20,-18,-19,-22,49,49,]),'DIVIDE':([1,3,4,10,12,13,27,28,32,36,38,41,42,43,44,45,46,55,59,64,65,67,68,69,70,72,82,],[-26,-29,-27,-28,-30,24,-23,-24,24,24,24,24,-21,-20,24,24,-22,24,24,24,24,24,24,24,24,24,24,]),'FOR':([0,1,3,4,5,10,12,13,14,15,18,21,27,28,38,42,43,44,45,46,55,57,58,59,63,64,65,66,67,68,69,70,73,80,81,83,85,86,87,88,91,92,],[6,-26,-29,-27,6,-28,-30,-7,-6,-5,6,-10,-23,-24,-25,-21,-20,-18,-19,-22,-37,-11,-9,-8,6,-35,-33,6,-31,-32,-34,-36,6,-13,-12,-15,6,6,6,-16,-14,-17,]),'EQUALS':([1,3,4,10,12,27,28,32,38,41,42,43,44,45,46,59,72,],[-26,-29,-27,-28,-30,-23,-24,48,-25,48,-21,-20,-18,-19,-22,48,48,]),'TIMES':([1,3,4,10,12,13,27,28,32,36,38,41,42,43,44,45,46,55,59,64,65,67,68,69,70,72,82,],[-26,-29,-27,-28,-30,25,-23,-24,25,25,25,25,-21,-20,25,25,-22,25,25,25,25,25,25,25,25,25,25,]),'WRITE':([0,1,3,4,5,10,12,13,14,15,18,21,27,28,38,42,43,44,45,46,55,57,58,59,63,64,65,66,67,68,69,70,73,80,81,83,85,86,87,88,91,92,],[7,-26,-29,-27,7,-28,-30,-7,-6,-5,7,-10,-23,-24,-25,-21,-20,-18,-19,-22,-37,-11,-9,-8,7,-35,-33,7,-31,-32,-34,-36,7,-13,-12,-15,7,7,7,-16,-14,-17,]),'GE':([1,3,4,10,12,27,28,32,38,41,42,43,44,45,46,59,72,],[-26,-29,-27,-28,-30,-23,-24,53,-25,53,-21,-20,-18,-19,-22,53,53,]),'END_LINE':([1,3,4,5,10,12,13,14,15,21,27,28,35,38,42,43,44,45,46,55,57,58,59,64,65,67,68,69,70,71,80,81,83,88,91,92,],[-26,-29,-27,18,-28,-30,-7,-6,-5,-10,-23,-24,56,-25,-21,-20,-18,-19,-22,-37,-11,-9,-8,-35,-33,-31,-32,-34,-36,78,-13,-12,-15,-16,-14,-17,]),'LPAREN':([2,6,7,11,],[16,19,20,23,]),'VAR':([0,1,3,4,5,10,12,13,14,15,18,19,21,27,28,38,42,43,44,45,46,55,57,58,59,63,64,65,66,67,68,69,70,73,80,81,83,86,87,88,91,92,],[9,-26,-29,-27,9,-28,-30,-7,-6,-5,9,9,-10,-23,-24,-25,-21,-20,-18,-19,-22,-37,-11,-9,-8,9,-35,-33,9,-31,-32,-34,-36,9,-13,-12,-15,9,9,-16,-14,-17,]),'ELSE':([83,],[85,]),'ID':([0,1,3,4,5,9,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,33,37,38,42,43,44,45,46,48,49,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,73,78,80,81,83,86,87,88,91,92,],[10,-26,-29,-27,10,21,-28,-30,-7,-6,-5,10,10,10,-10,10,10,10,10,10,-23,-24,10,10,10,10,-25,-21,-20,-18,-19,-22,10,10,10,10,10,10,-37,10,-11,-9,-8,10,10,10,-35,-33,10,-31,-32,-34,-36,10,10,-13,-12,-15,10,10,-16,-14,-17,]),'IF':([0,1,3,4,5,10,12,13,14,15,18,21,27,28,38,42,43,44,45,46,55,57,58,59,63,64,65,66,67,68,69,70,73,80,81,83,85,86,87,88,91,92,],[11,-26,-29,-27,11,-28,-30,-7,-6,-5,11,-10,-23,-24,-25,-21,-20,-18,-19,-22,-37,-11,-9,-8,11,-35,-33,11,-31,-32,-34,-36,11,-13,-12,-15,11,11,11,-16,-14,-17,]),'AND':([1,3,4,10,12,27,28,38,40,42,43,44,45,46,55,64,65,67,68,69,70,],[-26,-29,-27,-28,-30,-23,-24,-25,61,-21,-20,-18,-19,-22,-37,-35,-33,-31,-32,-34,-36,]),'FALSE':([0,1,3,4,5,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,33,37,38,42,43,44,45,46,48,49,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,73,78,80,81,83,86,87,88,91,92,],[12,-26,-29,-27,12,-28,-30,-7,-6,-5,12,12,12,-10,12,12,12,12,12,-23,-24,12,12,12,12,-25,-21,-20,-18,-19,-22,12,12,12,12,12,12,-37,12,-11,-9,-8,12,12,12,-35,-33,12,-31,-32,-34,-36,12,12,-13,-12,-15,12,12,-16,-14,-17,]),'DECREMENT':([1,3,4,10,12,13,27,28,32,36,38,41,42,43,44,45,46,55,59,64,65,67,68,69,70,72,82,],[-26,-29,-27,-28,-30,28,-23,-24,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'NOT':([16,23,37,56,61,62,],[33,33,33,33,33,33,]),'RBRACKET':([1,3,4,5,10,12,13,14,15,17,18,21,27,28,34,38,42,43,44,45,46,55,57,58,59,64,65,67,68,69,70,76,77,79,80,81,83,88,89,90,91,92,],[-26,-29,-27,-4,-28,-30,-7,-6,-5,-1,-3,-10,-23,-24,-2,-25,-21,-20,-18,-19,-22,-37,-11,-9,-8,-35,-33,-31,-32,-34,-36,80,81,83,-13,-12,-15,-16,91,92,-14,-17,]),'OR':([1,3,4,10,12,27,28,38,40,42,43,44,45,46,55,64,65,67,68,69,70,],[-26,-29,-27,-28,-30,-23,-24,-25,62,-21,-20,-18,-19,-22,-37,-35,-33,-31,-32,-34,-36,]),'MOD':([1,3,4,10,12,13,27,28,32,36,38,41,42,43,44,45,46,55,59,64,65,67,68,69,70,72,82,],[-26,-29,-27,-28,-30,30,-23,-24,30,30,30,30,-21,-20,30,30,-22,30,30,30,30,30,30,30,30,30,30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'relexpr':([16,23,37,56,61,62,],[31,40,58,71,40,40,]),'expr':([0,5,16,18,20,22,23,24,25,26,29,30,33,37,48,49,51,52,53,54,56,61,62,63,66,73,78,86,87,],[13,13,32,13,36,38,41,42,43,44,45,46,55,59,64,65,67,68,69,70,72,41,41,13,13,13,82,13,13,]),'declarations':([0,5,18,19,63,66,73,86,87,],[14,14,14,35,14,14,14,14,14,]),'S':([0,5,18,63,66,73,86,87,],[8,17,34,76,77,79,89,90,]),'command':([0,5,18,63,66,73,85,86,87,],[15,15,15,15,15,15,88,15,15,]),'statement':([0,5,18,63,66,73,86,87,],[5,5,5,5,5,5,5,5,]),'relexprgroup':([23,61,62,],[39,74,75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> S","S'",1,None,None,None),
  ('S -> statement S','S',2,'p_rec_statement','parser.py',29),
  ('S -> statement END_LINE S','S',3,'p_rec_statement','parser.py',30),
  ('S -> statement END_LINE','S',2,'p_statement','parser.py',39),
  ('S -> statement','S',1,'p_statement','parser.py',40),
  ('statement -> command','statement',1,'p_commands','parser.py',45),
  ('statement -> declarations','statement',1,'p_declarations','parser.py',53),
  ('statement -> expr','statement',1,'p_expr_statement','parser.py',58),
  ('declarations -> VAR ID ASSIGN expr','declarations',4,'p_variables','parser.py',67),
  ('declarations -> VAR ID ASSIGN relexpr','declarations',4,'p_variables','parser.py',68),
  ('declarations -> VAR ID','declarations',2,'p_variables','parser.py',69),
  ('command -> WRITE LPAREN expr RPAREN','command',4,'p_write','parser.py',81),
  ('command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET','command',7,'p_command_while','parser.py',86),
  ('command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET','command',7,'p_command_while','parser.py',87),
  ('command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET','command',11,'p_command_for','parser.py',92),
  ('command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET','command',7,'p_if','parser.py',105),
  ('command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET ELSE command','command',9,'p_if','parser.py',106),
  ('command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET ELSE LBRACKET S RBRACKET','command',11,'p_if','parser.py',107),
  ('expr -> expr PLUS expr','expr',3,'p_binary_expression','parser.py',121),
  ('expr -> expr MINUS expr','expr',3,'p_binary_expression','parser.py',122),
  ('expr -> expr TIMES expr','expr',3,'p_binary_expression','parser.py',123),
  ('expr -> expr DIVIDE expr','expr',3,'p_binary_expression','parser.py',124),
  ('expr -> expr MOD expr','expr',3,'p_binary_expression','parser.py',125),
  ('expr -> expr INCREMENT','expr',2,'p_unary_expressions','parser.py',130),
  ('expr -> expr DECREMENT','expr',2,'p_unary_expressions','parser.py',131),
  ('expr -> ID ASSIGN expr','expr',3,'p_assign_expression','parser.py',136),
  ('expr -> NUMBER','expr',1,'p_number_expression','parser.py',141),
  ('expr -> STRINGS','expr',1,'p_string_expression','parser.py',146),
  ('expr -> ID','expr',1,'p_variable_expression','parser.py',151),
  ('expr -> TRUE','expr',1,'p_variable_expression','parser.py',152),
  ('expr -> FALSE','expr',1,'p_variable_expression','parser.py',153),
  ('relexpr -> expr LT expr','relexpr',3,'p_relational_expressions','parser.py',171),
  ('relexpr -> expr LE expr','relexpr',3,'p_relational_expressions','parser.py',172),
  ('relexpr -> expr GT expr','relexpr',3,'p_relational_expressions','parser.py',173),
  ('relexpr -> expr GE expr','relexpr',3,'p_relational_expressions','parser.py',174),
  ('relexpr -> expr EQUALS expr','relexpr',3,'p_relational_expressions','parser.py',175),
  ('relexpr -> expr NE expr','relexpr',3,'p_relational_expressions','parser.py',176),
  ('relexpr -> NOT expr','relexpr',2,'p_relational_expressions','parser.py',177),
  ('relexprgroup -> relexpr AND relexprgroup','relexprgroup',3,'p_rel_group','parser.py',185),
  ('relexprgroup -> relexpr OR relexprgroup','relexprgroup',3,'p_rel_group','parser.py',186),
  ('relexprgroup -> relexpr','relexprgroup',1,'p_rel_group','parser.py',187),
  ('relexprgroup -> expr','relexprgroup',1,'p_rel_group','parser.py',188),
]
