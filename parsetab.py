
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftASSIGNNEleftGELELTGTleftPLUSMINUSleftTIMESDIVIDEMODrightNOTleftINCREMENTDECREMENTAND ASSIGN COMMA DECREMENT DIVIDE ELSE END_LINE EQUALS FALSE FOR FUNCTION GE GT ID IF INCREMENT LBRACKET LE LPAREN LT MINUS MOD NE NOT NUMBER OR PLUS RBRACKET RETURN RPAREN STRINGS TIMES TRUE VAR WHILE WRITES : statement S\n         | statement END_LINE S\n         S : statement END_LINE\n                 | statementstatement : commandstatement : declarationsstatement : exprdeclarations : VAR ID ASSIGN expr\n                    | VAR ID ASSIGN relexpr\n                    | VAR IDcommand : WRITE LPAREN expr RPAREN\n                | WRITE LPAREN relexpr RPARENcommand : WHILE LPAREN expr RPAREN LBRACKET S RBRACKET\n               | WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET command : FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET\n     command : IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET\n                    | IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET ELSE command\n                    | IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET ELSE LBRACKET S RBRACKET expr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n            | expr MOD exprexpr : expr INCREMENT\n            | expr DECREMENTexpr : ID ASSIGN exprexpr : NUMBERexpr : STRINGSexpr : ID\n            | TRUE\n            | FALSErelexpr : expr LT expr\n               | expr LE expr\n               | expr GT expr\n               | expr GE expr\n               | expr EQUALS expr\n               | expr NE expr\n               | NOT exprrelexprgroup : relexpr AND relexprgroup\n                    | relexpr OR relexprgroup\n                    | relexpr\n                    | expr\n    '
    
_lr_action_items = {'NUMBER':([0,1,3,4,5,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,33,38,39,43,44,45,46,47,49,50,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,88,89,90,93,94,],[1,-27,-30,-28,1,-29,-31,-7,-6,-5,1,1,1,-10,1,1,1,1,1,-24,-25,1,1,1,1,-26,-22,-21,-19,-20,-23,1,1,1,1,1,1,-38,1,-12,-11,-9,-8,1,1,1,-36,-34,1,-32,-33,-35,-37,1,1,-14,-13,-16,1,1,-17,-15,-18,]),'LBRACKET':([48,51,62,86,87,],[65,68,75,88,89,]),'WHILE':([0,1,3,4,5,10,12,13,14,15,18,21,27,28,39,43,44,45,46,47,56,58,59,60,61,65,66,67,68,69,70,71,72,75,82,83,85,87,88,89,90,93,94,],[2,-27,-30,-28,2,-29,-31,-7,-6,-5,2,-10,-24,-25,-26,-22,-21,-19,-20,-23,-38,-12,-11,-9,-8,2,-36,-34,2,-32,-33,-35,-37,2,-14,-13,-16,2,2,2,-17,-15,-18,]),'TRUE':([0,1,3,4,5,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,33,38,39,43,44,45,46,47,49,50,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,88,89,90,93,94,],[3,-27,-30,-28,3,-29,-31,-7,-6,-5,3,3,3,-10,3,3,3,3,3,-24,-25,3,3,3,3,-26,-22,-21,-19,-20,-23,3,3,3,3,3,3,-38,3,-12,-11,-9,-8,3,3,3,-36,-34,3,-32,-33,-35,-37,3,3,-14,-13,-16,3,3,-17,-15,-18,]),'MINUS':([1,3,4,10,12,13,27,28,32,37,39,42,43,44,45,46,47,56,61,66,67,69,70,71,72,74,84,],[-27,-30,-28,-29,-31,29,-24,-25,29,29,29,29,-22,-21,-19,-20,-23,29,29,29,29,29,29,29,29,29,29,]),'LE':([1,3,4,10,12,27,28,32,37,39,42,43,44,45,46,47,61,74,],[-27,-30,-28,-29,-31,-24,-25,53,53,-26,53,-22,-21,-19,-20,-23,53,53,]),'RPAREN':([1,3,4,10,12,27,28,31,32,36,37,39,40,41,42,43,44,45,46,47,56,66,67,69,70,71,72,76,77,84,],[-27,-30,-28,-29,-31,-24,-25,48,51,58,59,-26,62,-41,-42,-22,-21,-19,-20,-23,-38,-36,-34,-32,-33,-35,-37,-39,-40,86,]),'NE':([1,3,4,10,12,27,28,32,37,39,42,43,44,45,46,47,61,74,],[-27,-30,-28,-29,-31,-24,-25,55,55,-26,55,-22,-21,-19,-20,-23,55,55,]),'STRINGS':([0,1,3,4,5,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,33,38,39,43,44,45,46,47,49,50,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,88,89,90,93,94,],[4,-27,-30,-28,4,-29,-31,-7,-6,-5,4,4,4,-10,4,4,4,4,4,-24,-25,4,4,4,4,-26,-22,-21,-19,-20,-23,4,4,4,4,4,4,-38,4,-12,-11,-9,-8,4,4,4,-36,-34,4,-32,-33,-35,-37,4,4,-14,-13,-16,4,4,-17,-15,-18,]),'LT':([1,3,4,10,12,27,28,32,37,39,42,43,44,45,46,47,61,74,],[-27,-30,-28,-29,-31,-24,-25,52,52,-26,52,-22,-21,-19,-20,-23,52,52,]),'PLUS':([1,3,4,10,12,13,27,28,32,37,39,42,43,44,45,46,47,56,61,66,67,69,70,71,72,74,84,],[-27,-30,-28,-29,-31,26,-24,-25,26,26,26,26,-22,-21,-19,-20,-23,26,26,26,26,26,26,26,26,26,26,]),'INCREMENT':([1,3,4,10,12,13,27,28,32,37,39,42,43,44,45,46,47,56,61,66,67,69,70,71,72,74,84,],[-27,-30,-28,-29,-31,27,-24,-25,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'ASSIGN':([10,21,],[22,38,]),'$end':([1,3,4,5,8,10,12,13,14,15,17,18,21,27,28,34,39,43,44,45,46,47,56,58,59,60,61,66,67,69,70,71,72,82,83,85,90,93,94,],[-27,-30,-28,-4,0,-29,-31,-7,-6,-5,-1,-3,-10,-24,-25,-2,-26,-22,-21,-19,-20,-23,-38,-12,-11,-9,-8,-36,-34,-32,-33,-35,-37,-14,-13,-16,-17,-15,-18,]),'RBRACKET':([1,3,4,5,10,12,13,14,15,17,18,21,27,28,34,39,43,44,45,46,47,56,58,59,60,61,66,67,69,70,71,72,78,79,81,82,83,85,90,91,92,93,94,],[-27,-30,-28,-4,-29,-31,-7,-6,-5,-1,-3,-10,-24,-25,-2,-26,-22,-21,-19,-20,-23,-38,-12,-11,-9,-8,-36,-34,-32,-33,-35,-37,82,83,85,-14,-13,-16,-17,93,94,-15,-18,]),'GT':([1,3,4,10,12,27,28,32,37,39,42,43,44,45,46,47,61,74,],[-27,-30,-28,-29,-31,-24,-25,50,50,-26,50,-22,-21,-19,-20,-23,50,50,]),'DIVIDE':([1,3,4,10,12,13,27,28,32,37,39,42,43,44,45,46,47,56,61,66,67,69,70,71,72,74,84,],[-27,-30,-28,-29,-31,24,-24,-25,24,24,24,24,-22,-21,24,24,-23,24,24,24,24,24,24,24,24,24,24,]),'FOR':([0,1,3,4,5,10,12,13,14,15,18,21,27,28,39,43,44,45,46,47,56,58,59,60,61,65,66,67,68,69,70,71,72,75,82,83,85,87,88,89,90,93,94,],[6,-27,-30,-28,6,-29,-31,-7,-6,-5,6,-10,-24,-25,-26,-22,-21,-19,-20,-23,-38,-12,-11,-9,-8,6,-36,-34,6,-32,-33,-35,-37,6,-14,-13,-16,6,6,6,-17,-15,-18,]),'EQUALS':([1,3,4,10,12,27,28,32,37,39,42,43,44,45,46,47,61,74,],[-27,-30,-28,-29,-31,-24,-25,49,49,-26,49,-22,-21,-19,-20,-23,49,49,]),'TIMES':([1,3,4,10,12,13,27,28,32,37,39,42,43,44,45,46,47,56,61,66,67,69,70,71,72,74,84,],[-27,-30,-28,-29,-31,25,-24,-25,25,25,25,25,-22,-21,25,25,-23,25,25,25,25,25,25,25,25,25,25,]),'WRITE':([0,1,3,4,5,10,12,13,14,15,18,21,27,28,39,43,44,45,46,47,56,58,59,60,61,65,66,67,68,69,70,71,72,75,82,83,85,87,88,89,90,93,94,],[7,-27,-30,-28,7,-29,-31,-7,-6,-5,7,-10,-24,-25,-26,-22,-21,-19,-20,-23,-38,-12,-11,-9,-8,7,-36,-34,7,-32,-33,-35,-37,7,-14,-13,-16,7,7,7,-17,-15,-18,]),'GE':([1,3,4,10,12,27,28,32,37,39,42,43,44,45,46,47,61,74,],[-27,-30,-28,-29,-31,-24,-25,54,54,-26,54,-22,-21,-19,-20,-23,54,54,]),'END_LINE':([1,3,4,5,10,12,13,14,15,21,27,28,35,39,43,44,45,46,47,56,58,59,60,61,66,67,69,70,71,72,73,82,83,85,90,93,94,],[-27,-30,-28,18,-29,-31,-7,-6,-5,-10,-24,-25,57,-26,-22,-21,-19,-20,-23,-38,-12,-11,-9,-8,-36,-34,-32,-33,-35,-37,80,-14,-13,-16,-17,-15,-18,]),'LPAREN':([2,6,7,11,],[16,19,20,23,]),'VAR':([0,1,3,4,5,10,12,13,14,15,18,19,21,27,28,39,43,44,45,46,47,56,58,59,60,61,65,66,67,68,69,70,71,72,75,82,83,85,88,89,90,93,94,],[9,-27,-30,-28,9,-29,-31,-7,-6,-5,9,9,-10,-24,-25,-26,-22,-21,-19,-20,-23,-38,-12,-11,-9,-8,9,-36,-34,9,-32,-33,-35,-37,9,-14,-13,-16,9,9,-17,-15,-18,]),'ELSE':([85,],[87,]),'ID':([0,1,3,4,5,9,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,33,38,39,43,44,45,46,47,49,50,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,88,89,90,93,94,],[10,-27,-30,-28,10,21,-29,-31,-7,-6,-5,10,10,10,-10,10,10,10,10,10,-24,-25,10,10,10,10,-26,-22,-21,-19,-20,-23,10,10,10,10,10,10,-38,10,-12,-11,-9,-8,10,10,10,-36,-34,10,-32,-33,-35,-37,10,10,-14,-13,-16,10,10,-17,-15,-18,]),'IF':([0,1,3,4,5,10,12,13,14,15,18,21,27,28,39,43,44,45,46,47,56,58,59,60,61,65,66,67,68,69,70,71,72,75,82,83,85,87,88,89,90,93,94,],[11,-27,-30,-28,11,-29,-31,-7,-6,-5,11,-10,-24,-25,-26,-22,-21,-19,-20,-23,-38,-12,-11,-9,-8,11,-36,-34,11,-32,-33,-35,-37,11,-14,-13,-16,11,11,11,-17,-15,-18,]),'AND':([1,3,4,10,12,27,28,39,41,43,44,45,46,47,56,66,67,69,70,71,72,],[-27,-30,-28,-29,-31,-24,-25,-26,63,-22,-21,-19,-20,-23,-38,-36,-34,-32,-33,-35,-37,]),'FALSE':([0,1,3,4,5,10,12,13,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,33,38,39,43,44,45,46,47,49,50,52,53,54,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72,75,80,82,83,85,88,89,90,93,94,],[12,-27,-30,-28,12,-29,-31,-7,-6,-5,12,12,12,-10,12,12,12,12,12,-24,-25,12,12,12,12,-26,-22,-21,-19,-20,-23,12,12,12,12,12,12,-38,12,-12,-11,-9,-8,12,12,12,-36,-34,12,-32,-33,-35,-37,12,12,-14,-13,-16,12,12,-17,-15,-18,]),'NOT':([16,20,23,38,57,63,64,],[33,33,33,33,33,33,33,]),'DECREMENT':([1,3,4,10,12,13,27,28,32,37,39,42,43,44,45,46,47,56,61,66,67,69,70,71,72,74,84,],[-27,-30,-28,-29,-31,28,-24,-25,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'OR':([1,3,4,10,12,27,28,39,41,43,44,45,46,47,56,66,67,69,70,71,72,],[-27,-30,-28,-29,-31,-24,-25,-26,64,-22,-21,-19,-20,-23,-38,-36,-34,-32,-33,-35,-37,]),'MOD':([1,3,4,10,12,13,27,28,32,37,39,42,43,44,45,46,47,56,61,66,67,69,70,71,72,74,84,],[-27,-30,-28,-29,-31,30,-24,-25,30,30,30,30,-22,-21,30,30,-23,30,30,30,30,30,30,30,30,30,30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'relexpr':([16,20,23,38,57,63,64,],[31,36,41,60,73,41,41,]),'expr':([0,5,16,18,20,22,23,24,25,26,29,30,33,38,49,50,52,53,54,55,57,63,64,65,68,75,80,88,89,],[13,13,32,13,37,39,42,43,44,45,46,47,56,61,66,67,69,70,71,72,74,42,42,13,13,13,84,13,13,]),'declarations':([0,5,18,19,65,68,75,88,89,],[14,14,14,35,14,14,14,14,14,]),'S':([0,5,18,65,68,75,88,89,],[8,17,34,78,79,81,91,92,]),'command':([0,5,18,65,68,75,87,88,89,],[15,15,15,15,15,15,90,15,15,]),'statement':([0,5,18,65,68,75,88,89,],[5,5,5,5,5,5,5,5,]),'relexprgroup':([23,63,64,],[40,76,77,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> S","S'",1,None,None,None),
  ('S -> statement S','S',2,'p_rec_statement','parser.py',29),
  ('S -> statement END_LINE S','S',3,'p_rec_statement','parser.py',30),
  ('S -> statement END_LINE','S',2,'p_statement','parser.py',39),
  ('S -> statement','S',1,'p_statement','parser.py',40),
  ('statement -> command','statement',1,'p_commands','parser.py',45),
  ('statement -> declarations','statement',1,'p_declarations','parser.py',53),
  ('statement -> expr','statement',1,'p_expr_statement','parser.py',58),
  ('declarations -> VAR ID ASSIGN expr','declarations',4,'p_variables','parser.py',67),
  ('declarations -> VAR ID ASSIGN relexpr','declarations',4,'p_variables','parser.py',68),
  ('declarations -> VAR ID','declarations',2,'p_variables','parser.py',69),
  ('command -> WRITE LPAREN expr RPAREN','command',4,'p_write','parser.py',81),
  ('command -> WRITE LPAREN relexpr RPAREN','command',4,'p_write','parser.py',82),
  ('command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET','command',7,'p_command_while','parser.py',87),
  ('command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET','command',7,'p_command_while','parser.py',88),
  ('command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET','command',11,'p_command_for','parser.py',93),
  ('command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET','command',7,'p_if','parser.py',106),
  ('command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET ELSE command','command',9,'p_if','parser.py',107),
  ('command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET ELSE LBRACKET S RBRACKET','command',11,'p_if','parser.py',108),
  ('expr -> expr PLUS expr','expr',3,'p_binary_expression','parser.py',122),
  ('expr -> expr MINUS expr','expr',3,'p_binary_expression','parser.py',123),
  ('expr -> expr TIMES expr','expr',3,'p_binary_expression','parser.py',124),
  ('expr -> expr DIVIDE expr','expr',3,'p_binary_expression','parser.py',125),
  ('expr -> expr MOD expr','expr',3,'p_binary_expression','parser.py',126),
  ('expr -> expr INCREMENT','expr',2,'p_unary_expressions','parser.py',131),
  ('expr -> expr DECREMENT','expr',2,'p_unary_expressions','parser.py',132),
  ('expr -> ID ASSIGN expr','expr',3,'p_assign_expression','parser.py',137),
  ('expr -> NUMBER','expr',1,'p_number_expression','parser.py',142),
  ('expr -> STRINGS','expr',1,'p_string_expression','parser.py',147),
  ('expr -> ID','expr',1,'p_variable_expression','parser.py',152),
  ('expr -> TRUE','expr',1,'p_variable_expression','parser.py',153),
  ('expr -> FALSE','expr',1,'p_variable_expression','parser.py',154),
  ('relexpr -> expr LT expr','relexpr',3,'p_relational_expressions','parser.py',172),
  ('relexpr -> expr LE expr','relexpr',3,'p_relational_expressions','parser.py',173),
  ('relexpr -> expr GT expr','relexpr',3,'p_relational_expressions','parser.py',174),
  ('relexpr -> expr GE expr','relexpr',3,'p_relational_expressions','parser.py',175),
  ('relexpr -> expr EQUALS expr','relexpr',3,'p_relational_expressions','parser.py',176),
  ('relexpr -> expr NE expr','relexpr',3,'p_relational_expressions','parser.py',177),
  ('relexpr -> NOT expr','relexpr',2,'p_relational_expressions','parser.py',178),
  ('relexprgroup -> relexpr AND relexprgroup','relexprgroup',3,'p_rel_group','parser.py',186),
  ('relexprgroup -> relexpr OR relexprgroup','relexprgroup',3,'p_rel_group','parser.py',187),
  ('relexprgroup -> relexpr','relexprgroup',1,'p_rel_group','parser.py',188),
  ('relexprgroup -> expr','relexprgroup',1,'p_rel_group','parser.py',189),
]
