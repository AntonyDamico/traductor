
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORLOGICleftANDLOGICleftASSIGNNEleftGELELTGTleftPLUSMINUSleftTIMESDIVIDEMODrightNOTANDLOGIC ASSIGN COMMA DIVIDE END_LINE EQUALS FOR FUNCTION GE GT ID IF LBRACKET LE LPAREN LT MINUS MOD NE NOT NUMBER ORLOGIC PLUS PROMPT QUOTE RBRACKET RETURN RPAREN STRINGS TIMES VAR WHILE WRITES : statement S\n         | statement END_LINE SS : statement END_LINEstatement : declarationsdeclarations : VAR IDdeclarations : WRITE LPAREN expr RPARENdeclaration : IF LPAREN relexpr RPARENexpr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n            | expr MOD exprexpr : NUMBER\n    expr : LPAREN expr RPARENrelexpr : expr LT expr\n               | expr LE expr\n               | expr GT expr\n               | expr GE expr\n               | expr EQUALS expr\n               | expr NE expr'
    
_lr_action_items = {'RPAREN':([10,11,20,21,22,23,24,25,26,],[14,-13,26,-11,-10,-8,-9,-12,-14,]),'DIVIDE':([10,11,20,21,22,23,24,25,26,],[15,-13,15,-11,-10,15,15,-12,-14,]),'NUMBER':([6,12,15,16,17,18,19,],[11,11,11,11,11,11,11,]),'TIMES':([10,11,20,21,22,23,24,25,26,],[16,-13,16,-11,-10,16,16,-12,-14,]),'WRITE':([0,1,4,8,9,14,],[2,-4,2,2,-5,-6,]),'END_LINE':([1,4,9,14,],[-4,8,-5,-6,]),'LPAREN':([2,6,12,15,16,17,18,19,],[6,12,12,12,12,12,12,12,]),'VAR':([0,1,4,8,9,14,],[5,-4,5,5,-5,-6,]),'PLUS':([10,11,20,21,22,23,24,25,26,],[17,-13,17,-11,-10,-8,-9,-12,-14,]),'MOD':([10,11,20,21,22,23,24,25,26,],[19,-13,19,-11,-10,19,19,-12,-14,]),'MINUS':([10,11,20,21,22,23,24,25,26,],[18,-13,18,-11,-10,-8,-9,-12,-14,]),'ID':([5,],[9,]),'$end':([3,7,8,13,],[0,-1,-3,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([6,12,15,16,17,18,19,],[10,20,21,22,23,24,25,]),'S':([0,4,8,],[3,7,13,]),'declarations':([0,4,8,],[1,1,1,]),'statement':([0,4,8,],[4,4,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> S","S'",1,None,None,None),
  ('S -> statement S','S',2,'p_rec_statement','parser.py',19),
  ('S -> statement END_LINE S','S',3,'p_rec_statement','parser.py',20),
  ('S -> statement END_LINE','S',2,'p_statement','parser.py',28),
  ('statement -> declarations','statement',1,'p_declarations','parser.py',33),
  ('declarations -> VAR ID','declarations',2,'p_variables','parser.py',42),
  ('declarations -> WRITE LPAREN expr RPAREN','declarations',4,'p_write','parser.py',47),
  ('declaration -> IF LPAREN relexpr RPAREN','declaration',4,'p_if','parser.py',52),
  ('expr -> expr PLUS expr','expr',3,'p_binary_expression','parser.py',62),
  ('expr -> expr MINUS expr','expr',3,'p_binary_expression','parser.py',63),
  ('expr -> expr TIMES expr','expr',3,'p_binary_expression','parser.py',64),
  ('expr -> expr DIVIDE expr','expr',3,'p_binary_expression','parser.py',65),
  ('expr -> expr MOD expr','expr',3,'p_binary_expression','parser.py',66),
  ('expr -> NUMBER','expr',1,'p_number_expression','parser.py',71),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_group_expression','parser.py',77),
  ('relexpr -> expr LT expr','relexpr',3,'p_relational_expressions','parser.py',86),
  ('relexpr -> expr LE expr','relexpr',3,'p_relational_expressions','parser.py',87),
  ('relexpr -> expr GT expr','relexpr',3,'p_relational_expressions','parser.py',88),
  ('relexpr -> expr GE expr','relexpr',3,'p_relational_expressions','parser.py',89),
  ('relexpr -> expr EQUALS expr','relexpr',3,'p_relational_expressions','parser.py',90),
  ('relexpr -> expr NE expr','relexpr',3,'p_relational_expressions','parser.py',91),
]
