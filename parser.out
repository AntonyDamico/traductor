Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN
    QUOTE
    COMMA
    FUNCTION
    PROMPT
    ELSE
    NOT

Grammar

Rule 0     S' -> S
Rule 1     S -> statement S
Rule 2     S -> statement END_LINE S
Rule 3     S -> statement END_LINE
Rule 4     S -> command
Rule 5     S -> command END_LINE
Rule 6     statement -> declarations
Rule 7     statement -> expr
Rule 8     declarations -> VAR ID ASSIGN expr
Rule 9     declarations -> VAR ID ASSIGN relexpr
Rule 10    declarations -> VAR ID
Rule 11    command -> WRITE LPAREN expr RPAREN
Rule 12    command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
Rule 13    command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
Rule 14    command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET
Rule 15    command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET
Rule 16    expr -> expr PLUS expr
Rule 17    expr -> expr MINUS expr
Rule 18    expr -> expr TIMES expr
Rule 19    expr -> expr DIVIDE expr
Rule 20    expr -> expr MOD expr
Rule 21    expr -> expr INCREMENT
Rule 22    expr -> expr DECREMENT
Rule 23    expr -> ID ASSIGN expr
Rule 24    expr -> NUMBER
Rule 25    expr -> STRINGS
Rule 26    expr -> ID
Rule 27    expr -> LPAREN expr RPAREN
Rule 28    relexpr -> expr LT expr
Rule 29    relexpr -> expr LE expr
Rule 30    relexpr -> expr GT expr
Rule 31    relexpr -> expr GE expr
Rule 32    relexpr -> expr EQUALS expr
Rule 33    relexpr -> expr NE expr
Rule 34    relexprgroup -> relexpr AND relexprgroup
Rule 35    relexprgroup -> relexpr OR relexprgroup
Rule 36    relexprgroup -> relexpr

Terminals, with rules where they appear

AND                  : 34
ASSIGN               : 8 9 23
COMMA                : 
DECREMENT            : 22
DIVIDE               : 19
ELSE                 : 
END_LINE             : 2 3 5 14 14
EQUALS               : 32
FOR                  : 14
FUNCTION             : 
GE                   : 31
GT                   : 30
ID                   : 8 9 10 23 26
IF                   : 15
INCREMENT            : 21
LBRACKET             : 12 13 14 15
LE                   : 29
LPAREN               : 11 12 13 14 15 27
LT                   : 28
MINUS                : 17
MOD                  : 20
NE                   : 33
NOT                  : 
NUMBER               : 24
OR                   : 35
PLUS                 : 16
PROMPT               : 
QUOTE                : 
RBRACKET             : 12 13 14 15
RETURN               : 
RPAREN               : 11 12 13 14 15 27
STRINGS              : 25
TIMES                : 18
VAR                  : 8 9 10
WHILE                : 12 13
WRITE                : 11
error                : 

Nonterminals, with rules where they appear

S                    : 1 2 12 13 14 15 0
command              : 4 5
declarations         : 6 14
expr                 : 7 8 11 12 14 16 16 17 17 18 18 19 19 20 20 21 22 23 27 28 28 29 29 30 30 31 31 32 32 33 33
relexpr              : 9 13 14 34 35 36
relexprgroup         : 15 34 35
statement            : 1 2 3

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) S -> . command END_LINE
    (6) statement -> . declarations
    (7) statement -> . expr
    (11) command -> . WRITE LPAREN expr RPAREN
    (12) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (13) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (14) command -> . FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET
    (15) command -> . IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET
    (8) declarations -> . VAR ID ASSIGN expr
    (9) declarations -> . VAR ID ASSIGN relexpr
    (10) declarations -> . VAR ID
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    WRITE           shift and go to state 6
    WHILE           shift and go to state 2
    FOR             shift and go to state 5
    IF              shift and go to state 11
    VAR             shift and go to state 9
    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 12
    declarations                   shift and go to state 13
    S                              shift and go to state 7
    command                        shift and go to state 14
    statement                      shift and go to state 4

state 1

    (24) expr -> NUMBER .

    PLUS            reduce using rule 24 (expr -> NUMBER .)
    MINUS           reduce using rule 24 (expr -> NUMBER .)
    TIMES           reduce using rule 24 (expr -> NUMBER .)
    DIVIDE          reduce using rule 24 (expr -> NUMBER .)
    MOD             reduce using rule 24 (expr -> NUMBER .)
    INCREMENT       reduce using rule 24 (expr -> NUMBER .)
    DECREMENT       reduce using rule 24 (expr -> NUMBER .)
    LT              reduce using rule 24 (expr -> NUMBER .)
    LE              reduce using rule 24 (expr -> NUMBER .)
    GT              reduce using rule 24 (expr -> NUMBER .)
    GE              reduce using rule 24 (expr -> NUMBER .)
    EQUALS          reduce using rule 24 (expr -> NUMBER .)
    NE              reduce using rule 24 (expr -> NUMBER .)
    END_LINE        reduce using rule 24 (expr -> NUMBER .)
    WRITE           reduce using rule 24 (expr -> NUMBER .)
    WHILE           reduce using rule 24 (expr -> NUMBER .)
    FOR             reduce using rule 24 (expr -> NUMBER .)
    IF              reduce using rule 24 (expr -> NUMBER .)
    VAR             reduce using rule 24 (expr -> NUMBER .)
    ID              reduce using rule 24 (expr -> NUMBER .)
    NUMBER          reduce using rule 24 (expr -> NUMBER .)
    STRINGS         reduce using rule 24 (expr -> NUMBER .)
    LPAREN          reduce using rule 24 (expr -> NUMBER .)
    RPAREN          reduce using rule 24 (expr -> NUMBER .)
    AND             reduce using rule 24 (expr -> NUMBER .)
    OR              reduce using rule 24 (expr -> NUMBER .)


state 2

    (12) command -> WHILE . LPAREN expr RPAREN LBRACKET S RBRACKET
    (13) command -> WHILE . LPAREN relexpr RPAREN LBRACKET S RBRACKET

    LPAREN          shift and go to state 15


state 3

    (25) expr -> STRINGS .

    PLUS            reduce using rule 25 (expr -> STRINGS .)
    MINUS           reduce using rule 25 (expr -> STRINGS .)
    TIMES           reduce using rule 25 (expr -> STRINGS .)
    DIVIDE          reduce using rule 25 (expr -> STRINGS .)
    MOD             reduce using rule 25 (expr -> STRINGS .)
    INCREMENT       reduce using rule 25 (expr -> STRINGS .)
    DECREMENT       reduce using rule 25 (expr -> STRINGS .)
    LT              reduce using rule 25 (expr -> STRINGS .)
    LE              reduce using rule 25 (expr -> STRINGS .)
    GT              reduce using rule 25 (expr -> STRINGS .)
    GE              reduce using rule 25 (expr -> STRINGS .)
    EQUALS          reduce using rule 25 (expr -> STRINGS .)
    NE              reduce using rule 25 (expr -> STRINGS .)
    END_LINE        reduce using rule 25 (expr -> STRINGS .)
    WRITE           reduce using rule 25 (expr -> STRINGS .)
    WHILE           reduce using rule 25 (expr -> STRINGS .)
    FOR             reduce using rule 25 (expr -> STRINGS .)
    IF              reduce using rule 25 (expr -> STRINGS .)
    VAR             reduce using rule 25 (expr -> STRINGS .)
    ID              reduce using rule 25 (expr -> STRINGS .)
    NUMBER          reduce using rule 25 (expr -> STRINGS .)
    STRINGS         reduce using rule 25 (expr -> STRINGS .)
    LPAREN          reduce using rule 25 (expr -> STRINGS .)
    RPAREN          reduce using rule 25 (expr -> STRINGS .)
    AND             reduce using rule 25 (expr -> STRINGS .)
    OR              reduce using rule 25 (expr -> STRINGS .)


state 4

    (1) S -> statement . S
    (2) S -> statement . END_LINE S
    (3) S -> statement . END_LINE
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) S -> . command END_LINE
    (6) statement -> . declarations
    (7) statement -> . expr
    (11) command -> . WRITE LPAREN expr RPAREN
    (12) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (13) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (14) command -> . FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET
    (15) command -> . IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET
    (8) declarations -> . VAR ID ASSIGN expr
    (9) declarations -> . VAR ID ASSIGN relexpr
    (10) declarations -> . VAR ID
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    END_LINE        shift and go to state 17
    WRITE           shift and go to state 6
    WHILE           shift and go to state 2
    FOR             shift and go to state 5
    IF              shift and go to state 11
    VAR             shift and go to state 9
    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 12
    declarations                   shift and go to state 13
    S                              shift and go to state 16
    command                        shift and go to state 14
    statement                      shift and go to state 4

state 5

    (14) command -> FOR . LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET

    LPAREN          shift and go to state 18


state 6

    (11) command -> WRITE . LPAREN expr RPAREN

    LPAREN          shift and go to state 19


state 7

    (0) S' -> S .



state 8

    (27) expr -> LPAREN . expr RPAREN
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 20

state 9

    (8) declarations -> VAR . ID ASSIGN expr
    (9) declarations -> VAR . ID ASSIGN relexpr
    (10) declarations -> VAR . ID

    ID              shift and go to state 21


state 10

    (23) expr -> ID . ASSIGN expr
    (26) expr -> ID .

    ASSIGN          shift and go to state 22
    PLUS            reduce using rule 26 (expr -> ID .)
    MINUS           reduce using rule 26 (expr -> ID .)
    TIMES           reduce using rule 26 (expr -> ID .)
    DIVIDE          reduce using rule 26 (expr -> ID .)
    MOD             reduce using rule 26 (expr -> ID .)
    INCREMENT       reduce using rule 26 (expr -> ID .)
    DECREMENT       reduce using rule 26 (expr -> ID .)
    LT              reduce using rule 26 (expr -> ID .)
    LE              reduce using rule 26 (expr -> ID .)
    GT              reduce using rule 26 (expr -> ID .)
    GE              reduce using rule 26 (expr -> ID .)
    EQUALS          reduce using rule 26 (expr -> ID .)
    NE              reduce using rule 26 (expr -> ID .)
    END_LINE        reduce using rule 26 (expr -> ID .)
    WRITE           reduce using rule 26 (expr -> ID .)
    WHILE           reduce using rule 26 (expr -> ID .)
    FOR             reduce using rule 26 (expr -> ID .)
    IF              reduce using rule 26 (expr -> ID .)
    VAR             reduce using rule 26 (expr -> ID .)
    ID              reduce using rule 26 (expr -> ID .)
    NUMBER          reduce using rule 26 (expr -> ID .)
    STRINGS         reduce using rule 26 (expr -> ID .)
    LPAREN          reduce using rule 26 (expr -> ID .)
    RPAREN          reduce using rule 26 (expr -> ID .)
    AND             reduce using rule 26 (expr -> ID .)
    OR              reduce using rule 26 (expr -> ID .)


state 11

    (15) command -> IF . LPAREN relexprgroup RPAREN LBRACKET S RBRACKET

    LPAREN          shift and go to state 23


state 12

    (7) statement -> expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    END_LINE        reduce using rule 7 (statement -> expr .)
    WRITE           reduce using rule 7 (statement -> expr .)
    WHILE           reduce using rule 7 (statement -> expr .)
    FOR             reduce using rule 7 (statement -> expr .)
    IF              reduce using rule 7 (statement -> expr .)
    VAR             reduce using rule 7 (statement -> expr .)
    ID              reduce using rule 7 (statement -> expr .)
    NUMBER          reduce using rule 7 (statement -> expr .)
    STRINGS         reduce using rule 7 (statement -> expr .)
    LPAREN          reduce using rule 7 (statement -> expr .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 13

    (6) statement -> declarations .

    END_LINE        reduce using rule 6 (statement -> declarations .)
    WRITE           reduce using rule 6 (statement -> declarations .)
    WHILE           reduce using rule 6 (statement -> declarations .)
    FOR             reduce using rule 6 (statement -> declarations .)
    IF              reduce using rule 6 (statement -> declarations .)
    VAR             reduce using rule 6 (statement -> declarations .)
    ID              reduce using rule 6 (statement -> declarations .)
    NUMBER          reduce using rule 6 (statement -> declarations .)
    STRINGS         reduce using rule 6 (statement -> declarations .)
    LPAREN          reduce using rule 6 (statement -> declarations .)


state 14

    (4) S -> command .
    (5) S -> command . END_LINE

    RBRACKET        reduce using rule 4 (S -> command .)
    $end            reduce using rule 4 (S -> command .)
    END_LINE        shift and go to state 31


state 15

    (12) command -> WHILE LPAREN . expr RPAREN LBRACKET S RBRACKET
    (13) command -> WHILE LPAREN . relexpr RPAREN LBRACKET S RBRACKET
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN
    (28) relexpr -> . expr LT expr
    (29) relexpr -> . expr LE expr
    (30) relexpr -> . expr GT expr
    (31) relexpr -> . expr GE expr
    (32) relexpr -> . expr EQUALS expr
    (33) relexpr -> . expr NE expr

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 33
    relexpr                        shift and go to state 32

state 16

    (1) S -> statement S .

    RBRACKET        reduce using rule 1 (S -> statement S .)
    $end            reduce using rule 1 (S -> statement S .)


state 17

    (2) S -> statement END_LINE . S
    (3) S -> statement END_LINE .
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) S -> . command END_LINE
    (6) statement -> . declarations
    (7) statement -> . expr
    (11) command -> . WRITE LPAREN expr RPAREN
    (12) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (13) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (14) command -> . FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET
    (15) command -> . IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET
    (8) declarations -> . VAR ID ASSIGN expr
    (9) declarations -> . VAR ID ASSIGN relexpr
    (10) declarations -> . VAR ID
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    RBRACKET        reduce using rule 3 (S -> statement END_LINE .)
    $end            reduce using rule 3 (S -> statement END_LINE .)
    WRITE           shift and go to state 6
    WHILE           shift and go to state 2
    FOR             shift and go to state 5
    IF              shift and go to state 11
    VAR             shift and go to state 9
    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 12
    declarations                   shift and go to state 13
    S                              shift and go to state 34
    command                        shift and go to state 14
    statement                      shift and go to state 4

state 18

    (14) command -> FOR LPAREN . declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET
    (8) declarations -> . VAR ID ASSIGN expr
    (9) declarations -> . VAR ID ASSIGN relexpr
    (10) declarations -> . VAR ID

    VAR             shift and go to state 9

    declarations                   shift and go to state 35

state 19

    (11) command -> WRITE LPAREN . expr RPAREN
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 36

state 20

    (27) expr -> LPAREN expr . RPAREN
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    RPAREN          shift and go to state 37
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 21

    (8) declarations -> VAR ID . ASSIGN expr
    (9) declarations -> VAR ID . ASSIGN relexpr
    (10) declarations -> VAR ID .

    ASSIGN          shift and go to state 38
    END_LINE        reduce using rule 10 (declarations -> VAR ID .)
    WRITE           reduce using rule 10 (declarations -> VAR ID .)
    WHILE           reduce using rule 10 (declarations -> VAR ID .)
    FOR             reduce using rule 10 (declarations -> VAR ID .)
    IF              reduce using rule 10 (declarations -> VAR ID .)
    VAR             reduce using rule 10 (declarations -> VAR ID .)
    ID              reduce using rule 10 (declarations -> VAR ID .)
    NUMBER          reduce using rule 10 (declarations -> VAR ID .)
    STRINGS         reduce using rule 10 (declarations -> VAR ID .)
    LPAREN          reduce using rule 10 (declarations -> VAR ID .)


state 22

    (23) expr -> ID ASSIGN . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 39

state 23

    (15) command -> IF LPAREN . relexprgroup RPAREN LBRACKET S RBRACKET
    (34) relexprgroup -> . relexpr AND relexprgroup
    (35) relexprgroup -> . relexpr OR relexprgroup
    (36) relexprgroup -> . relexpr
    (28) relexpr -> . expr LT expr
    (29) relexpr -> . expr LE expr
    (30) relexpr -> . expr GT expr
    (31) relexpr -> . expr GE expr
    (32) relexpr -> . expr EQUALS expr
    (33) relexpr -> . expr NE expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    relexprgroup                   shift and go to state 40
    relexpr                        shift and go to state 41
    expr                           shift and go to state 42

state 24

    (19) expr -> expr DIVIDE . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 43

state 25

    (18) expr -> expr TIMES . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 44

state 26

    (16) expr -> expr PLUS . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 45

state 27

    (21) expr -> expr INCREMENT .

    PLUS            reduce using rule 21 (expr -> expr INCREMENT .)
    MINUS           reduce using rule 21 (expr -> expr INCREMENT .)
    TIMES           reduce using rule 21 (expr -> expr INCREMENT .)
    DIVIDE          reduce using rule 21 (expr -> expr INCREMENT .)
    MOD             reduce using rule 21 (expr -> expr INCREMENT .)
    INCREMENT       reduce using rule 21 (expr -> expr INCREMENT .)
    DECREMENT       reduce using rule 21 (expr -> expr INCREMENT .)
    LT              reduce using rule 21 (expr -> expr INCREMENT .)
    LE              reduce using rule 21 (expr -> expr INCREMENT .)
    GT              reduce using rule 21 (expr -> expr INCREMENT .)
    GE              reduce using rule 21 (expr -> expr INCREMENT .)
    EQUALS          reduce using rule 21 (expr -> expr INCREMENT .)
    NE              reduce using rule 21 (expr -> expr INCREMENT .)
    END_LINE        reduce using rule 21 (expr -> expr INCREMENT .)
    WRITE           reduce using rule 21 (expr -> expr INCREMENT .)
    WHILE           reduce using rule 21 (expr -> expr INCREMENT .)
    FOR             reduce using rule 21 (expr -> expr INCREMENT .)
    IF              reduce using rule 21 (expr -> expr INCREMENT .)
    VAR             reduce using rule 21 (expr -> expr INCREMENT .)
    ID              reduce using rule 21 (expr -> expr INCREMENT .)
    NUMBER          reduce using rule 21 (expr -> expr INCREMENT .)
    STRINGS         reduce using rule 21 (expr -> expr INCREMENT .)
    LPAREN          reduce using rule 21 (expr -> expr INCREMENT .)
    RPAREN          reduce using rule 21 (expr -> expr INCREMENT .)
    AND             reduce using rule 21 (expr -> expr INCREMENT .)
    OR              reduce using rule 21 (expr -> expr INCREMENT .)


state 28

    (22) expr -> expr DECREMENT .

    PLUS            reduce using rule 22 (expr -> expr DECREMENT .)
    MINUS           reduce using rule 22 (expr -> expr DECREMENT .)
    TIMES           reduce using rule 22 (expr -> expr DECREMENT .)
    DIVIDE          reduce using rule 22 (expr -> expr DECREMENT .)
    MOD             reduce using rule 22 (expr -> expr DECREMENT .)
    INCREMENT       reduce using rule 22 (expr -> expr DECREMENT .)
    DECREMENT       reduce using rule 22 (expr -> expr DECREMENT .)
    LT              reduce using rule 22 (expr -> expr DECREMENT .)
    LE              reduce using rule 22 (expr -> expr DECREMENT .)
    GT              reduce using rule 22 (expr -> expr DECREMENT .)
    GE              reduce using rule 22 (expr -> expr DECREMENT .)
    EQUALS          reduce using rule 22 (expr -> expr DECREMENT .)
    NE              reduce using rule 22 (expr -> expr DECREMENT .)
    END_LINE        reduce using rule 22 (expr -> expr DECREMENT .)
    WRITE           reduce using rule 22 (expr -> expr DECREMENT .)
    WHILE           reduce using rule 22 (expr -> expr DECREMENT .)
    FOR             reduce using rule 22 (expr -> expr DECREMENT .)
    IF              reduce using rule 22 (expr -> expr DECREMENT .)
    VAR             reduce using rule 22 (expr -> expr DECREMENT .)
    ID              reduce using rule 22 (expr -> expr DECREMENT .)
    NUMBER          reduce using rule 22 (expr -> expr DECREMENT .)
    STRINGS         reduce using rule 22 (expr -> expr DECREMENT .)
    LPAREN          reduce using rule 22 (expr -> expr DECREMENT .)
    RPAREN          reduce using rule 22 (expr -> expr DECREMENT .)
    AND             reduce using rule 22 (expr -> expr DECREMENT .)
    OR              reduce using rule 22 (expr -> expr DECREMENT .)


state 29

    (17) expr -> expr MINUS . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 46

state 30

    (20) expr -> expr MOD . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 47

state 31

    (5) S -> command END_LINE .

    RBRACKET        reduce using rule 5 (S -> command END_LINE .)
    $end            reduce using rule 5 (S -> command END_LINE .)


state 32

    (13) command -> WHILE LPAREN relexpr . RPAREN LBRACKET S RBRACKET

    RPAREN          shift and go to state 48


state 33

    (12) command -> WHILE LPAREN expr . RPAREN LBRACKET S RBRACKET
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT
    (28) relexpr -> expr . LT expr
    (29) relexpr -> expr . LE expr
    (30) relexpr -> expr . GT expr
    (31) relexpr -> expr . GE expr
    (32) relexpr -> expr . EQUALS expr
    (33) relexpr -> expr . NE expr

    RPAREN          shift and go to state 51
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28
    LT              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 50
    GE              shift and go to state 54
    EQUALS          shift and go to state 49
    NE              shift and go to state 55


state 34

    (2) S -> statement END_LINE S .

    RBRACKET        reduce using rule 2 (S -> statement END_LINE S .)
    $end            reduce using rule 2 (S -> statement END_LINE S .)


state 35

    (14) command -> FOR LPAREN declarations . END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET

    END_LINE        shift and go to state 56


state 36

    (11) command -> WRITE LPAREN expr . RPAREN
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    RPAREN          shift and go to state 57
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 37

    (27) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    INCREMENT       reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    DECREMENT       reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    END_LINE        reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    WRITE           reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    VAR             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    ID              reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    STRINGS         reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 27 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 27 (expr -> LPAREN expr RPAREN .)


state 38

    (8) declarations -> VAR ID ASSIGN . expr
    (9) declarations -> VAR ID ASSIGN . relexpr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN
    (28) relexpr -> . expr LT expr
    (29) relexpr -> . expr LE expr
    (30) relexpr -> . expr GT expr
    (31) relexpr -> . expr GE expr
    (32) relexpr -> . expr EQUALS expr
    (33) relexpr -> . expr NE expr

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 59
    relexpr                        shift and go to state 58

state 39

    (23) expr -> ID ASSIGN expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    LT              reduce using rule 23 (expr -> ID ASSIGN expr .)
    LE              reduce using rule 23 (expr -> ID ASSIGN expr .)
    GT              reduce using rule 23 (expr -> ID ASSIGN expr .)
    GE              reduce using rule 23 (expr -> ID ASSIGN expr .)
    EQUALS          reduce using rule 23 (expr -> ID ASSIGN expr .)
    NE              reduce using rule 23 (expr -> ID ASSIGN expr .)
    END_LINE        reduce using rule 23 (expr -> ID ASSIGN expr .)
    WRITE           reduce using rule 23 (expr -> ID ASSIGN expr .)
    WHILE           reduce using rule 23 (expr -> ID ASSIGN expr .)
    FOR             reduce using rule 23 (expr -> ID ASSIGN expr .)
    IF              reduce using rule 23 (expr -> ID ASSIGN expr .)
    VAR             reduce using rule 23 (expr -> ID ASSIGN expr .)
    ID              reduce using rule 23 (expr -> ID ASSIGN expr .)
    NUMBER          reduce using rule 23 (expr -> ID ASSIGN expr .)
    STRINGS         reduce using rule 23 (expr -> ID ASSIGN expr .)
    LPAREN          reduce using rule 23 (expr -> ID ASSIGN expr .)
    RPAREN          reduce using rule 23 (expr -> ID ASSIGN expr .)
    AND             reduce using rule 23 (expr -> ID ASSIGN expr .)
    OR              reduce using rule 23 (expr -> ID ASSIGN expr .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28

  ! PLUS            [ reduce using rule 23 (expr -> ID ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> ID ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 23 (expr -> ID ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> ID ASSIGN expr .) ]
  ! MOD             [ reduce using rule 23 (expr -> ID ASSIGN expr .) ]
  ! INCREMENT       [ reduce using rule 23 (expr -> ID ASSIGN expr .) ]
  ! DECREMENT       [ reduce using rule 23 (expr -> ID ASSIGN expr .) ]


state 40

    (15) command -> IF LPAREN relexprgroup . RPAREN LBRACKET S RBRACKET

    RPAREN          shift and go to state 60


state 41

    (34) relexprgroup -> relexpr . AND relexprgroup
    (35) relexprgroup -> relexpr . OR relexprgroup
    (36) relexprgroup -> relexpr .

    AND             shift and go to state 61
    OR              shift and go to state 62
    RPAREN          reduce using rule 36 (relexprgroup -> relexpr .)


state 42

    (28) relexpr -> expr . LT expr
    (29) relexpr -> expr . LE expr
    (30) relexpr -> expr . GT expr
    (31) relexpr -> expr . GE expr
    (32) relexpr -> expr . EQUALS expr
    (33) relexpr -> expr . NE expr
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    LT              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 50
    GE              shift and go to state 54
    EQUALS          shift and go to state 49
    NE              shift and go to state 55
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 43

    (19) expr -> expr DIVIDE expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    PLUS            reduce using rule 19 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 19 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 19 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 19 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 19 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 19 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 19 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 19 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 19 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 19 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 19 (expr -> expr DIVIDE expr .)
    END_LINE        reduce using rule 19 (expr -> expr DIVIDE expr .)
    WRITE           reduce using rule 19 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 19 (expr -> expr DIVIDE expr .)
    FOR             reduce using rule 19 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 19 (expr -> expr DIVIDE expr .)
    VAR             reduce using rule 19 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 19 (expr -> expr DIVIDE expr .)
    NUMBER          reduce using rule 19 (expr -> expr DIVIDE expr .)
    STRINGS         reduce using rule 19 (expr -> expr DIVIDE expr .)
    LPAREN          reduce using rule 19 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 19 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 19 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 19 (expr -> expr DIVIDE expr .)
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28

  ! INCREMENT       [ reduce using rule 19 (expr -> expr DIVIDE expr .) ]
  ! DECREMENT       [ reduce using rule 19 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 30 ]


state 44

    (18) expr -> expr TIMES expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    PLUS            reduce using rule 18 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 18 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 18 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 18 (expr -> expr TIMES expr .)
    MOD             reduce using rule 18 (expr -> expr TIMES expr .)
    LT              reduce using rule 18 (expr -> expr TIMES expr .)
    LE              reduce using rule 18 (expr -> expr TIMES expr .)
    GT              reduce using rule 18 (expr -> expr TIMES expr .)
    GE              reduce using rule 18 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 18 (expr -> expr TIMES expr .)
    NE              reduce using rule 18 (expr -> expr TIMES expr .)
    END_LINE        reduce using rule 18 (expr -> expr TIMES expr .)
    WRITE           reduce using rule 18 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 18 (expr -> expr TIMES expr .)
    FOR             reduce using rule 18 (expr -> expr TIMES expr .)
    IF              reduce using rule 18 (expr -> expr TIMES expr .)
    VAR             reduce using rule 18 (expr -> expr TIMES expr .)
    ID              reduce using rule 18 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 18 (expr -> expr TIMES expr .)
    STRINGS         reduce using rule 18 (expr -> expr TIMES expr .)
    LPAREN          reduce using rule 18 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 18 (expr -> expr TIMES expr .)
    AND             reduce using rule 18 (expr -> expr TIMES expr .)
    OR              reduce using rule 18 (expr -> expr TIMES expr .)
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28

  ! INCREMENT       [ reduce using rule 18 (expr -> expr TIMES expr .) ]
  ! DECREMENT       [ reduce using rule 18 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 30 ]


state 45

    (16) expr -> expr PLUS expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    PLUS            reduce using rule 16 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 16 (expr -> expr PLUS expr .)
    LT              reduce using rule 16 (expr -> expr PLUS expr .)
    LE              reduce using rule 16 (expr -> expr PLUS expr .)
    GT              reduce using rule 16 (expr -> expr PLUS expr .)
    GE              reduce using rule 16 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 16 (expr -> expr PLUS expr .)
    NE              reduce using rule 16 (expr -> expr PLUS expr .)
    END_LINE        reduce using rule 16 (expr -> expr PLUS expr .)
    WRITE           reduce using rule 16 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 16 (expr -> expr PLUS expr .)
    FOR             reduce using rule 16 (expr -> expr PLUS expr .)
    IF              reduce using rule 16 (expr -> expr PLUS expr .)
    VAR             reduce using rule 16 (expr -> expr PLUS expr .)
    ID              reduce using rule 16 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 16 (expr -> expr PLUS expr .)
    STRINGS         reduce using rule 16 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 16 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 16 (expr -> expr PLUS expr .)
    AND             reduce using rule 16 (expr -> expr PLUS expr .)
    OR              reduce using rule 16 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28

  ! TIMES           [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! INCREMENT       [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! DECREMENT       [ reduce using rule 16 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 29 ]


state 46

    (17) expr -> expr MINUS expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    PLUS            reduce using rule 17 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 17 (expr -> expr MINUS expr .)
    LT              reduce using rule 17 (expr -> expr MINUS expr .)
    LE              reduce using rule 17 (expr -> expr MINUS expr .)
    GT              reduce using rule 17 (expr -> expr MINUS expr .)
    GE              reduce using rule 17 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 17 (expr -> expr MINUS expr .)
    NE              reduce using rule 17 (expr -> expr MINUS expr .)
    END_LINE        reduce using rule 17 (expr -> expr MINUS expr .)
    WRITE           reduce using rule 17 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 17 (expr -> expr MINUS expr .)
    FOR             reduce using rule 17 (expr -> expr MINUS expr .)
    IF              reduce using rule 17 (expr -> expr MINUS expr .)
    VAR             reduce using rule 17 (expr -> expr MINUS expr .)
    ID              reduce using rule 17 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 17 (expr -> expr MINUS expr .)
    STRINGS         reduce using rule 17 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 17 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 17 (expr -> expr MINUS expr .)
    AND             reduce using rule 17 (expr -> expr MINUS expr .)
    OR              reduce using rule 17 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28

  ! TIMES           [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! INCREMENT       [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! DECREMENT       [ reduce using rule 17 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 29 ]


state 47

    (20) expr -> expr MOD expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    PLUS            reduce using rule 20 (expr -> expr MOD expr .)
    MINUS           reduce using rule 20 (expr -> expr MOD expr .)
    TIMES           reduce using rule 20 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 20 (expr -> expr MOD expr .)
    MOD             reduce using rule 20 (expr -> expr MOD expr .)
    LT              reduce using rule 20 (expr -> expr MOD expr .)
    LE              reduce using rule 20 (expr -> expr MOD expr .)
    GT              reduce using rule 20 (expr -> expr MOD expr .)
    GE              reduce using rule 20 (expr -> expr MOD expr .)
    EQUALS          reduce using rule 20 (expr -> expr MOD expr .)
    NE              reduce using rule 20 (expr -> expr MOD expr .)
    END_LINE        reduce using rule 20 (expr -> expr MOD expr .)
    WRITE           reduce using rule 20 (expr -> expr MOD expr .)
    WHILE           reduce using rule 20 (expr -> expr MOD expr .)
    FOR             reduce using rule 20 (expr -> expr MOD expr .)
    IF              reduce using rule 20 (expr -> expr MOD expr .)
    VAR             reduce using rule 20 (expr -> expr MOD expr .)
    ID              reduce using rule 20 (expr -> expr MOD expr .)
    NUMBER          reduce using rule 20 (expr -> expr MOD expr .)
    STRINGS         reduce using rule 20 (expr -> expr MOD expr .)
    LPAREN          reduce using rule 20 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 20 (expr -> expr MOD expr .)
    AND             reduce using rule 20 (expr -> expr MOD expr .)
    OR              reduce using rule 20 (expr -> expr MOD expr .)
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28

  ! INCREMENT       [ reduce using rule 20 (expr -> expr MOD expr .) ]
  ! DECREMENT       [ reduce using rule 20 (expr -> expr MOD expr .) ]
  ! PLUS            [ shift and go to state 26 ]
  ! MINUS           [ shift and go to state 29 ]
  ! TIMES           [ shift and go to state 25 ]
  ! DIVIDE          [ shift and go to state 24 ]
  ! MOD             [ shift and go to state 30 ]


state 48

    (13) command -> WHILE LPAREN relexpr RPAREN . LBRACKET S RBRACKET

    LBRACKET        shift and go to state 63


state 49

    (32) relexpr -> expr EQUALS . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 64

state 50

    (30) relexpr -> expr GT . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 65

state 51

    (12) command -> WHILE LPAREN expr RPAREN . LBRACKET S RBRACKET

    LBRACKET        shift and go to state 66


state 52

    (28) relexpr -> expr LT . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 67

state 53

    (29) relexpr -> expr LE . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 68

state 54

    (31) relexpr -> expr GE . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 69

state 55

    (33) relexpr -> expr NE . expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 70

state 56

    (14) command -> FOR LPAREN declarations END_LINE . relexpr END_LINE expr RPAREN LBRACKET S RBRACKET
    (28) relexpr -> . expr LT expr
    (29) relexpr -> . expr LE expr
    (30) relexpr -> . expr GT expr
    (31) relexpr -> . expr GE expr
    (32) relexpr -> . expr EQUALS expr
    (33) relexpr -> . expr NE expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    relexpr                        shift and go to state 71
    expr                           shift and go to state 42

state 57

    (11) command -> WRITE LPAREN expr RPAREN .

    END_LINE        reduce using rule 11 (command -> WRITE LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 11 (command -> WRITE LPAREN expr RPAREN .)
    $end            reduce using rule 11 (command -> WRITE LPAREN expr RPAREN .)


state 58

    (9) declarations -> VAR ID ASSIGN relexpr .

    END_LINE        reduce using rule 9 (declarations -> VAR ID ASSIGN relexpr .)
    WRITE           reduce using rule 9 (declarations -> VAR ID ASSIGN relexpr .)
    WHILE           reduce using rule 9 (declarations -> VAR ID ASSIGN relexpr .)
    FOR             reduce using rule 9 (declarations -> VAR ID ASSIGN relexpr .)
    IF              reduce using rule 9 (declarations -> VAR ID ASSIGN relexpr .)
    VAR             reduce using rule 9 (declarations -> VAR ID ASSIGN relexpr .)
    ID              reduce using rule 9 (declarations -> VAR ID ASSIGN relexpr .)
    NUMBER          reduce using rule 9 (declarations -> VAR ID ASSIGN relexpr .)
    STRINGS         reduce using rule 9 (declarations -> VAR ID ASSIGN relexpr .)
    LPAREN          reduce using rule 9 (declarations -> VAR ID ASSIGN relexpr .)


state 59

    (8) declarations -> VAR ID ASSIGN expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT
    (28) relexpr -> expr . LT expr
    (29) relexpr -> expr . LE expr
    (30) relexpr -> expr . GT expr
    (31) relexpr -> expr . GE expr
    (32) relexpr -> expr . EQUALS expr
    (33) relexpr -> expr . NE expr

    END_LINE        reduce using rule 8 (declarations -> VAR ID ASSIGN expr .)
    WRITE           reduce using rule 8 (declarations -> VAR ID ASSIGN expr .)
    WHILE           reduce using rule 8 (declarations -> VAR ID ASSIGN expr .)
    FOR             reduce using rule 8 (declarations -> VAR ID ASSIGN expr .)
    IF              reduce using rule 8 (declarations -> VAR ID ASSIGN expr .)
    VAR             reduce using rule 8 (declarations -> VAR ID ASSIGN expr .)
    ID              reduce using rule 8 (declarations -> VAR ID ASSIGN expr .)
    NUMBER          reduce using rule 8 (declarations -> VAR ID ASSIGN expr .)
    STRINGS         reduce using rule 8 (declarations -> VAR ID ASSIGN expr .)
    LPAREN          reduce using rule 8 (declarations -> VAR ID ASSIGN expr .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28
    LT              shift and go to state 52
    LE              shift and go to state 53
    GT              shift and go to state 50
    GE              shift and go to state 54
    EQUALS          shift and go to state 49
    NE              shift and go to state 55


state 60

    (15) command -> IF LPAREN relexprgroup RPAREN . LBRACKET S RBRACKET

    LBRACKET        shift and go to state 72


state 61

    (34) relexprgroup -> relexpr AND . relexprgroup
    (34) relexprgroup -> . relexpr AND relexprgroup
    (35) relexprgroup -> . relexpr OR relexprgroup
    (36) relexprgroup -> . relexpr
    (28) relexpr -> . expr LT expr
    (29) relexpr -> . expr LE expr
    (30) relexpr -> . expr GT expr
    (31) relexpr -> . expr GE expr
    (32) relexpr -> . expr EQUALS expr
    (33) relexpr -> . expr NE expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    relexprgroup                   shift and go to state 73
    relexpr                        shift and go to state 41
    expr                           shift and go to state 42

state 62

    (35) relexprgroup -> relexpr OR . relexprgroup
    (34) relexprgroup -> . relexpr AND relexprgroup
    (35) relexprgroup -> . relexpr OR relexprgroup
    (36) relexprgroup -> . relexpr
    (28) relexpr -> . expr LT expr
    (29) relexpr -> . expr LE expr
    (30) relexpr -> . expr GT expr
    (31) relexpr -> . expr GE expr
    (32) relexpr -> . expr EQUALS expr
    (33) relexpr -> . expr NE expr
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    relexprgroup                   shift and go to state 74
    relexpr                        shift and go to state 41
    expr                           shift and go to state 42

state 63

    (13) command -> WHILE LPAREN relexpr RPAREN LBRACKET . S RBRACKET
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) S -> . command END_LINE
    (6) statement -> . declarations
    (7) statement -> . expr
    (11) command -> . WRITE LPAREN expr RPAREN
    (12) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (13) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (14) command -> . FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET
    (15) command -> . IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET
    (8) declarations -> . VAR ID ASSIGN expr
    (9) declarations -> . VAR ID ASSIGN relexpr
    (10) declarations -> . VAR ID
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    WRITE           shift and go to state 6
    WHILE           shift and go to state 2
    FOR             shift and go to state 5
    IF              shift and go to state 11
    VAR             shift and go to state 9
    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 12
    declarations                   shift and go to state 13
    S                              shift and go to state 75
    command                        shift and go to state 14
    statement                      shift and go to state 4

state 64

    (32) relexpr -> expr EQUALS expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    END_LINE        reduce using rule 32 (relexpr -> expr EQUALS expr .)
    WRITE           reduce using rule 32 (relexpr -> expr EQUALS expr .)
    WHILE           reduce using rule 32 (relexpr -> expr EQUALS expr .)
    FOR             reduce using rule 32 (relexpr -> expr EQUALS expr .)
    IF              reduce using rule 32 (relexpr -> expr EQUALS expr .)
    VAR             reduce using rule 32 (relexpr -> expr EQUALS expr .)
    ID              reduce using rule 32 (relexpr -> expr EQUALS expr .)
    NUMBER          reduce using rule 32 (relexpr -> expr EQUALS expr .)
    STRINGS         reduce using rule 32 (relexpr -> expr EQUALS expr .)
    LPAREN          reduce using rule 32 (relexpr -> expr EQUALS expr .)
    AND             reduce using rule 32 (relexpr -> expr EQUALS expr .)
    OR              reduce using rule 32 (relexpr -> expr EQUALS expr .)
    RPAREN          reduce using rule 32 (relexpr -> expr EQUALS expr .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 65

    (30) relexpr -> expr GT expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    END_LINE        reduce using rule 30 (relexpr -> expr GT expr .)
    WRITE           reduce using rule 30 (relexpr -> expr GT expr .)
    WHILE           reduce using rule 30 (relexpr -> expr GT expr .)
    FOR             reduce using rule 30 (relexpr -> expr GT expr .)
    IF              reduce using rule 30 (relexpr -> expr GT expr .)
    VAR             reduce using rule 30 (relexpr -> expr GT expr .)
    ID              reduce using rule 30 (relexpr -> expr GT expr .)
    NUMBER          reduce using rule 30 (relexpr -> expr GT expr .)
    STRINGS         reduce using rule 30 (relexpr -> expr GT expr .)
    LPAREN          reduce using rule 30 (relexpr -> expr GT expr .)
    AND             reduce using rule 30 (relexpr -> expr GT expr .)
    OR              reduce using rule 30 (relexpr -> expr GT expr .)
    RPAREN          reduce using rule 30 (relexpr -> expr GT expr .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 66

    (12) command -> WHILE LPAREN expr RPAREN LBRACKET . S RBRACKET
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) S -> . command END_LINE
    (6) statement -> . declarations
    (7) statement -> . expr
    (11) command -> . WRITE LPAREN expr RPAREN
    (12) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (13) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (14) command -> . FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET
    (15) command -> . IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET
    (8) declarations -> . VAR ID ASSIGN expr
    (9) declarations -> . VAR ID ASSIGN relexpr
    (10) declarations -> . VAR ID
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    WRITE           shift and go to state 6
    WHILE           shift and go to state 2
    FOR             shift and go to state 5
    IF              shift and go to state 11
    VAR             shift and go to state 9
    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 12
    declarations                   shift and go to state 13
    S                              shift and go to state 76
    command                        shift and go to state 14
    statement                      shift and go to state 4

state 67

    (28) relexpr -> expr LT expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    END_LINE        reduce using rule 28 (relexpr -> expr LT expr .)
    WRITE           reduce using rule 28 (relexpr -> expr LT expr .)
    WHILE           reduce using rule 28 (relexpr -> expr LT expr .)
    FOR             reduce using rule 28 (relexpr -> expr LT expr .)
    IF              reduce using rule 28 (relexpr -> expr LT expr .)
    VAR             reduce using rule 28 (relexpr -> expr LT expr .)
    ID              reduce using rule 28 (relexpr -> expr LT expr .)
    NUMBER          reduce using rule 28 (relexpr -> expr LT expr .)
    STRINGS         reduce using rule 28 (relexpr -> expr LT expr .)
    LPAREN          reduce using rule 28 (relexpr -> expr LT expr .)
    AND             reduce using rule 28 (relexpr -> expr LT expr .)
    OR              reduce using rule 28 (relexpr -> expr LT expr .)
    RPAREN          reduce using rule 28 (relexpr -> expr LT expr .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 68

    (29) relexpr -> expr LE expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    END_LINE        reduce using rule 29 (relexpr -> expr LE expr .)
    WRITE           reduce using rule 29 (relexpr -> expr LE expr .)
    WHILE           reduce using rule 29 (relexpr -> expr LE expr .)
    FOR             reduce using rule 29 (relexpr -> expr LE expr .)
    IF              reduce using rule 29 (relexpr -> expr LE expr .)
    VAR             reduce using rule 29 (relexpr -> expr LE expr .)
    ID              reduce using rule 29 (relexpr -> expr LE expr .)
    NUMBER          reduce using rule 29 (relexpr -> expr LE expr .)
    STRINGS         reduce using rule 29 (relexpr -> expr LE expr .)
    LPAREN          reduce using rule 29 (relexpr -> expr LE expr .)
    AND             reduce using rule 29 (relexpr -> expr LE expr .)
    OR              reduce using rule 29 (relexpr -> expr LE expr .)
    RPAREN          reduce using rule 29 (relexpr -> expr LE expr .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 69

    (31) relexpr -> expr GE expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    END_LINE        reduce using rule 31 (relexpr -> expr GE expr .)
    WRITE           reduce using rule 31 (relexpr -> expr GE expr .)
    WHILE           reduce using rule 31 (relexpr -> expr GE expr .)
    FOR             reduce using rule 31 (relexpr -> expr GE expr .)
    IF              reduce using rule 31 (relexpr -> expr GE expr .)
    VAR             reduce using rule 31 (relexpr -> expr GE expr .)
    ID              reduce using rule 31 (relexpr -> expr GE expr .)
    NUMBER          reduce using rule 31 (relexpr -> expr GE expr .)
    STRINGS         reduce using rule 31 (relexpr -> expr GE expr .)
    LPAREN          reduce using rule 31 (relexpr -> expr GE expr .)
    AND             reduce using rule 31 (relexpr -> expr GE expr .)
    OR              reduce using rule 31 (relexpr -> expr GE expr .)
    RPAREN          reduce using rule 31 (relexpr -> expr GE expr .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 70

    (33) relexpr -> expr NE expr .
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    END_LINE        reduce using rule 33 (relexpr -> expr NE expr .)
    WRITE           reduce using rule 33 (relexpr -> expr NE expr .)
    WHILE           reduce using rule 33 (relexpr -> expr NE expr .)
    FOR             reduce using rule 33 (relexpr -> expr NE expr .)
    IF              reduce using rule 33 (relexpr -> expr NE expr .)
    VAR             reduce using rule 33 (relexpr -> expr NE expr .)
    ID              reduce using rule 33 (relexpr -> expr NE expr .)
    NUMBER          reduce using rule 33 (relexpr -> expr NE expr .)
    STRINGS         reduce using rule 33 (relexpr -> expr NE expr .)
    LPAREN          reduce using rule 33 (relexpr -> expr NE expr .)
    AND             reduce using rule 33 (relexpr -> expr NE expr .)
    OR              reduce using rule 33 (relexpr -> expr NE expr .)
    RPAREN          reduce using rule 33 (relexpr -> expr NE expr .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 71

    (14) command -> FOR LPAREN declarations END_LINE relexpr . END_LINE expr RPAREN LBRACKET S RBRACKET

    END_LINE        shift and go to state 77


state 72

    (15) command -> IF LPAREN relexprgroup RPAREN LBRACKET . S RBRACKET
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) S -> . command END_LINE
    (6) statement -> . declarations
    (7) statement -> . expr
    (11) command -> . WRITE LPAREN expr RPAREN
    (12) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (13) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (14) command -> . FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET
    (15) command -> . IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET
    (8) declarations -> . VAR ID ASSIGN expr
    (9) declarations -> . VAR ID ASSIGN relexpr
    (10) declarations -> . VAR ID
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    WRITE           shift and go to state 6
    WHILE           shift and go to state 2
    FOR             shift and go to state 5
    IF              shift and go to state 11
    VAR             shift and go to state 9
    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 12
    declarations                   shift and go to state 13
    S                              shift and go to state 78
    command                        shift and go to state 14
    statement                      shift and go to state 4

state 73

    (34) relexprgroup -> relexpr AND relexprgroup .

    RPAREN          reduce using rule 34 (relexprgroup -> relexpr AND relexprgroup .)


state 74

    (35) relexprgroup -> relexpr OR relexprgroup .

    RPAREN          reduce using rule 35 (relexprgroup -> relexpr OR relexprgroup .)


state 75

    (13) command -> WHILE LPAREN relexpr RPAREN LBRACKET S . RBRACKET

    RBRACKET        shift and go to state 79


state 76

    (12) command -> WHILE LPAREN expr RPAREN LBRACKET S . RBRACKET

    RBRACKET        shift and go to state 80


state 77

    (14) command -> FOR LPAREN declarations END_LINE relexpr END_LINE . expr RPAREN LBRACKET S RBRACKET
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 81

state 78

    (15) command -> IF LPAREN relexprgroup RPAREN LBRACKET S . RBRACKET

    RBRACKET        shift and go to state 82


state 79

    (13) command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET .

    END_LINE        reduce using rule 13 (command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET .)
    RBRACKET        reduce using rule 13 (command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET .)
    $end            reduce using rule 13 (command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET .)


state 80

    (12) command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET .

    END_LINE        reduce using rule 12 (command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET .)
    RBRACKET        reduce using rule 12 (command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET .)
    $end            reduce using rule 12 (command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET .)


state 81

    (14) command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr . RPAREN LBRACKET S RBRACKET
    (16) expr -> expr . PLUS expr
    (17) expr -> expr . MINUS expr
    (18) expr -> expr . TIMES expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . MOD expr
    (21) expr -> expr . INCREMENT
    (22) expr -> expr . DECREMENT

    RPAREN          shift and go to state 83
    PLUS            shift and go to state 26
    MINUS           shift and go to state 29
    TIMES           shift and go to state 25
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 30
    INCREMENT       shift and go to state 27
    DECREMENT       shift and go to state 28


state 82

    (15) command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET .

    END_LINE        reduce using rule 15 (command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET .)
    RBRACKET        reduce using rule 15 (command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET .)
    $end            reduce using rule 15 (command -> IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET .)


state 83

    (14) command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN . LBRACKET S RBRACKET

    LBRACKET        shift and go to state 84


state 84

    (14) command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET . S RBRACKET
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) S -> . command END_LINE
    (6) statement -> . declarations
    (7) statement -> . expr
    (11) command -> . WRITE LPAREN expr RPAREN
    (12) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (13) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (14) command -> . FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET
    (15) command -> . IF LPAREN relexprgroup RPAREN LBRACKET S RBRACKET
    (8) declarations -> . VAR ID ASSIGN expr
    (9) declarations -> . VAR ID ASSIGN relexpr
    (10) declarations -> . VAR ID
    (16) expr -> . expr PLUS expr
    (17) expr -> . expr MINUS expr
    (18) expr -> . expr TIMES expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr MOD expr
    (21) expr -> . expr INCREMENT
    (22) expr -> . expr DECREMENT
    (23) expr -> . ID ASSIGN expr
    (24) expr -> . NUMBER
    (25) expr -> . STRINGS
    (26) expr -> . ID
    (27) expr -> . LPAREN expr RPAREN

    WRITE           shift and go to state 6
    WHILE           shift and go to state 2
    FOR             shift and go to state 5
    IF              shift and go to state 11
    VAR             shift and go to state 9
    ID              shift and go to state 10
    NUMBER          shift and go to state 1
    STRINGS         shift and go to state 3
    LPAREN          shift and go to state 8

    expr                           shift and go to state 12
    declarations                   shift and go to state 13
    S                              shift and go to state 85
    command                        shift and go to state 14
    statement                      shift and go to state 4

state 85

    (14) command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S . RBRACKET

    RBRACKET        shift and go to state 86


state 86

    (14) command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET .

    END_LINE        reduce using rule 14 (command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET .)
    RBRACKET        reduce using rule 14 (command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET .)
    $end            reduce using rule 14 (command -> FOR LPAREN declarations END_LINE relexpr END_LINE expr RPAREN LBRACKET S RBRACKET .)

