Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RETURN
    ORLOGIC
    QUOTE
    COMMA
    FUNCTION
    PROMPT
    FOR
    IF
    NOT
    ANDLOGIC

Grammar

Rule 0     S' -> S
Rule 1     S -> statement S
Rule 2     S -> statement END_LINE S
Rule 3     S -> statement END_LINE
Rule 4     S -> command
Rule 5     statement -> declarations
Rule 6     declarations -> VAR ID ASSIGN expr
Rule 7     declarations -> VAR ID ASSIGN relexpr
Rule 8     declarations -> VAR ID
Rule 9     declarations -> WRITE LPAREN expr RPAREN
Rule 10    command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
Rule 11    command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
Rule 12    expr -> expr PLUS expr
Rule 13    expr -> expr MINUS expr
Rule 14    expr -> expr TIMES expr
Rule 15    expr -> expr DIVIDE expr
Rule 16    expr -> expr MOD expr
Rule 17    expr -> NUMBER
Rule 18    expr -> STRINGS
Rule 19    expr -> ID
Rule 20    expr -> LPAREN expr RPAREN
Rule 21    relexpr -> expr LT expr
Rule 22    relexpr -> expr LE expr
Rule 23    relexpr -> expr GT expr
Rule 24    relexpr -> expr GE expr
Rule 25    relexpr -> expr EQUALS expr
Rule 26    relexpr -> expr NE expr

Terminals, with rules where they appear

ANDLOGIC             : 
ASSIGN               : 6 7
COMMA                : 
DIVIDE               : 15
END_LINE             : 2 3
EQUALS               : 25
FOR                  : 
FUNCTION             : 
GE                   : 24
GT                   : 23
ID                   : 6 7 8 19
IF                   : 
LBRACKET             : 10 11
LE                   : 22
LPAREN               : 9 10 11 20
LT                   : 21
MINUS                : 13
MOD                  : 16
NE                   : 26
NOT                  : 
NUMBER               : 17
ORLOGIC              : 
PLUS                 : 12
PROMPT               : 
QUOTE                : 
RBRACKET             : 10 11
RETURN               : 
RPAREN               : 9 10 11 20
STRINGS              : 18
TIMES                : 14
VAR                  : 6 7 8
WHILE                : 10 11
WRITE                : 9
error                : 

Nonterminals, with rules where they appear

S                    : 1 2 10 11 0
command              : 4
declarations         : 5
expr                 : 6 9 10 12 12 13 13 14 14 15 15 16 16 20 21 21 22 22 23 23 24 24 25 25 26 26
relexpr              : 7 11
statement            : 1 2 3

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) statement -> . declarations
    (10) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (11) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (6) declarations -> . VAR ID ASSIGN expr
    (7) declarations -> . VAR ID ASSIGN relexpr
    (8) declarations -> . VAR ID
    (9) declarations -> . WRITE LPAREN expr RPAREN

    WHILE           shift and go to state 3
    VAR             shift and go to state 7
    WRITE           shift and go to state 1

    declarations                   shift and go to state 2
    S                              shift and go to state 4
    command                        shift and go to state 5
    statement                      shift and go to state 6

state 1

    (9) declarations -> WRITE . LPAREN expr RPAREN

    LPAREN          shift and go to state 8


state 2

    (5) statement -> declarations .

    END_LINE        reduce using rule 5 (statement -> declarations .)
    WHILE           reduce using rule 5 (statement -> declarations .)
    VAR             reduce using rule 5 (statement -> declarations .)
    WRITE           reduce using rule 5 (statement -> declarations .)


state 3

    (10) command -> WHILE . LPAREN expr RPAREN LBRACKET S RBRACKET
    (11) command -> WHILE . LPAREN relexpr RPAREN LBRACKET S RBRACKET

    LPAREN          shift and go to state 9


state 4

    (0) S' -> S .



state 5

    (4) S -> command .

    $end            reduce using rule 4 (S -> command .)
    RBRACKET        reduce using rule 4 (S -> command .)


state 6

    (1) S -> statement . S
    (2) S -> statement . END_LINE S
    (3) S -> statement . END_LINE
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) statement -> . declarations
    (10) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (11) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (6) declarations -> . VAR ID ASSIGN expr
    (7) declarations -> . VAR ID ASSIGN relexpr
    (8) declarations -> . VAR ID
    (9) declarations -> . WRITE LPAREN expr RPAREN

    END_LINE        shift and go to state 11
    WHILE           shift and go to state 3
    VAR             shift and go to state 7
    WRITE           shift and go to state 1

    declarations                   shift and go to state 2
    S                              shift and go to state 10
    command                        shift and go to state 5
    statement                      shift and go to state 6

state 7

    (6) declarations -> VAR . ID ASSIGN expr
    (7) declarations -> VAR . ID ASSIGN relexpr
    (8) declarations -> VAR . ID

    ID              shift and go to state 12


state 8

    (9) declarations -> WRITE LPAREN . expr RPAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 13

state 9

    (10) command -> WHILE LPAREN . expr RPAREN LBRACKET S RBRACKET
    (11) command -> WHILE LPAREN . relexpr RPAREN LBRACKET S RBRACKET
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN
    (21) relexpr -> . expr LT expr
    (22) relexpr -> . expr LE expr
    (23) relexpr -> . expr GT expr
    (24) relexpr -> . expr GE expr
    (25) relexpr -> . expr EQUALS expr
    (26) relexpr -> . expr NE expr

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 19
    relexpr                        shift and go to state 18

state 10

    (1) S -> statement S .

    $end            reduce using rule 1 (S -> statement S .)
    RBRACKET        reduce using rule 1 (S -> statement S .)


state 11

    (2) S -> statement END_LINE . S
    (3) S -> statement END_LINE .
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) statement -> . declarations
    (10) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (11) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (6) declarations -> . VAR ID ASSIGN expr
    (7) declarations -> . VAR ID ASSIGN relexpr
    (8) declarations -> . VAR ID
    (9) declarations -> . WRITE LPAREN expr RPAREN

    $end            reduce using rule 3 (S -> statement END_LINE .)
    RBRACKET        reduce using rule 3 (S -> statement END_LINE .)
    WHILE           shift and go to state 3
    VAR             shift and go to state 7
    WRITE           shift and go to state 1

    declarations                   shift and go to state 2
    S                              shift and go to state 20
    command                        shift and go to state 5
    statement                      shift and go to state 6

state 12

    (6) declarations -> VAR ID . ASSIGN expr
    (7) declarations -> VAR ID . ASSIGN relexpr
    (8) declarations -> VAR ID .

    ASSIGN          shift and go to state 21
    END_LINE        reduce using rule 8 (declarations -> VAR ID .)
    WHILE           reduce using rule 8 (declarations -> VAR ID .)
    VAR             reduce using rule 8 (declarations -> VAR ID .)
    WRITE           reduce using rule 8 (declarations -> VAR ID .)


state 13

    (9) declarations -> WRITE LPAREN expr . RPAREN
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    RPAREN          shift and go to state 22
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27


state 14

    (17) expr -> NUMBER .

    RPAREN          reduce using rule 17 (expr -> NUMBER .)
    PLUS            reduce using rule 17 (expr -> NUMBER .)
    MINUS           reduce using rule 17 (expr -> NUMBER .)
    TIMES           reduce using rule 17 (expr -> NUMBER .)
    DIVIDE          reduce using rule 17 (expr -> NUMBER .)
    MOD             reduce using rule 17 (expr -> NUMBER .)
    LT              reduce using rule 17 (expr -> NUMBER .)
    LE              reduce using rule 17 (expr -> NUMBER .)
    GT              reduce using rule 17 (expr -> NUMBER .)
    GE              reduce using rule 17 (expr -> NUMBER .)
    EQUALS          reduce using rule 17 (expr -> NUMBER .)
    NE              reduce using rule 17 (expr -> NUMBER .)
    END_LINE        reduce using rule 17 (expr -> NUMBER .)
    WHILE           reduce using rule 17 (expr -> NUMBER .)
    VAR             reduce using rule 17 (expr -> NUMBER .)
    WRITE           reduce using rule 17 (expr -> NUMBER .)


state 15

    (20) expr -> LPAREN . expr RPAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 28

state 16

    (19) expr -> ID .

    RPAREN          reduce using rule 19 (expr -> ID .)
    PLUS            reduce using rule 19 (expr -> ID .)
    MINUS           reduce using rule 19 (expr -> ID .)
    TIMES           reduce using rule 19 (expr -> ID .)
    DIVIDE          reduce using rule 19 (expr -> ID .)
    MOD             reduce using rule 19 (expr -> ID .)
    LT              reduce using rule 19 (expr -> ID .)
    LE              reduce using rule 19 (expr -> ID .)
    GT              reduce using rule 19 (expr -> ID .)
    GE              reduce using rule 19 (expr -> ID .)
    EQUALS          reduce using rule 19 (expr -> ID .)
    NE              reduce using rule 19 (expr -> ID .)
    END_LINE        reduce using rule 19 (expr -> ID .)
    WHILE           reduce using rule 19 (expr -> ID .)
    VAR             reduce using rule 19 (expr -> ID .)
    WRITE           reduce using rule 19 (expr -> ID .)


state 17

    (18) expr -> STRINGS .

    RPAREN          reduce using rule 18 (expr -> STRINGS .)
    PLUS            reduce using rule 18 (expr -> STRINGS .)
    MINUS           reduce using rule 18 (expr -> STRINGS .)
    TIMES           reduce using rule 18 (expr -> STRINGS .)
    DIVIDE          reduce using rule 18 (expr -> STRINGS .)
    MOD             reduce using rule 18 (expr -> STRINGS .)
    LT              reduce using rule 18 (expr -> STRINGS .)
    LE              reduce using rule 18 (expr -> STRINGS .)
    GT              reduce using rule 18 (expr -> STRINGS .)
    GE              reduce using rule 18 (expr -> STRINGS .)
    EQUALS          reduce using rule 18 (expr -> STRINGS .)
    NE              reduce using rule 18 (expr -> STRINGS .)
    END_LINE        reduce using rule 18 (expr -> STRINGS .)
    WHILE           reduce using rule 18 (expr -> STRINGS .)
    VAR             reduce using rule 18 (expr -> STRINGS .)
    WRITE           reduce using rule 18 (expr -> STRINGS .)


state 18

    (11) command -> WHILE LPAREN relexpr . RPAREN LBRACKET S RBRACKET

    RPAREN          shift and go to state 29


state 19

    (10) command -> WHILE LPAREN expr . RPAREN LBRACKET S RBRACKET
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr
    (21) relexpr -> expr . LT expr
    (22) relexpr -> expr . LE expr
    (23) relexpr -> expr . GT expr
    (24) relexpr -> expr . GE expr
    (25) relexpr -> expr . EQUALS expr
    (26) relexpr -> expr . NE expr

    RPAREN          shift and go to state 32
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27
    LT              shift and go to state 33
    LE              shift and go to state 31
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQUALS          shift and go to state 30
    NE              shift and go to state 36


state 20

    (2) S -> statement END_LINE S .

    $end            reduce using rule 2 (S -> statement END_LINE S .)
    RBRACKET        reduce using rule 2 (S -> statement END_LINE S .)


state 21

    (6) declarations -> VAR ID ASSIGN . expr
    (7) declarations -> VAR ID ASSIGN . relexpr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN
    (21) relexpr -> . expr LT expr
    (22) relexpr -> . expr LE expr
    (23) relexpr -> . expr GT expr
    (24) relexpr -> . expr GE expr
    (25) relexpr -> . expr EQUALS expr
    (26) relexpr -> . expr NE expr

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 38
    relexpr                        shift and go to state 37

state 22

    (9) declarations -> WRITE LPAREN expr RPAREN .

    END_LINE        reduce using rule 9 (declarations -> WRITE LPAREN expr RPAREN .)
    WHILE           reduce using rule 9 (declarations -> WRITE LPAREN expr RPAREN .)
    VAR             reduce using rule 9 (declarations -> WRITE LPAREN expr RPAREN .)
    WRITE           reduce using rule 9 (declarations -> WRITE LPAREN expr RPAREN .)


state 23

    (15) expr -> expr DIVIDE . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 39

state 24

    (14) expr -> expr TIMES . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 40

state 25

    (12) expr -> expr PLUS . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 41

state 26

    (13) expr -> expr MINUS . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 42

state 27

    (16) expr -> expr MOD . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 43

state 28

    (20) expr -> LPAREN expr . RPAREN
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    RPAREN          shift and go to state 44
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27


state 29

    (11) command -> WHILE LPAREN relexpr RPAREN . LBRACKET S RBRACKET

    LBRACKET        shift and go to state 45


state 30

    (25) relexpr -> expr EQUALS . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 46

state 31

    (22) relexpr -> expr LE . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 47

state 32

    (10) command -> WHILE LPAREN expr RPAREN . LBRACKET S RBRACKET

    LBRACKET        shift and go to state 48


state 33

    (21) relexpr -> expr LT . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 49

state 34

    (23) relexpr -> expr GT . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 50

state 35

    (24) relexpr -> expr GE . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 51

state 36

    (26) relexpr -> expr NE . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr MOD expr
    (17) expr -> . NUMBER
    (18) expr -> . STRINGS
    (19) expr -> . ID
    (20) expr -> . LPAREN expr RPAREN

    NUMBER          shift and go to state 14
    STRINGS         shift and go to state 17
    ID              shift and go to state 16
    LPAREN          shift and go to state 15

    expr                           shift and go to state 52

state 37

    (7) declarations -> VAR ID ASSIGN relexpr .

    END_LINE        reduce using rule 7 (declarations -> VAR ID ASSIGN relexpr .)
    WHILE           reduce using rule 7 (declarations -> VAR ID ASSIGN relexpr .)
    VAR             reduce using rule 7 (declarations -> VAR ID ASSIGN relexpr .)
    WRITE           reduce using rule 7 (declarations -> VAR ID ASSIGN relexpr .)


state 38

    (6) declarations -> VAR ID ASSIGN expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr
    (21) relexpr -> expr . LT expr
    (22) relexpr -> expr . LE expr
    (23) relexpr -> expr . GT expr
    (24) relexpr -> expr . GE expr
    (25) relexpr -> expr . EQUALS expr
    (26) relexpr -> expr . NE expr

    END_LINE        reduce using rule 6 (declarations -> VAR ID ASSIGN expr .)
    WHILE           reduce using rule 6 (declarations -> VAR ID ASSIGN expr .)
    VAR             reduce using rule 6 (declarations -> VAR ID ASSIGN expr .)
    WRITE           reduce using rule 6 (declarations -> VAR ID ASSIGN expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27
    LT              shift and go to state 33
    LE              shift and go to state 31
    GT              shift and go to state 34
    GE              shift and go to state 35
    EQUALS          shift and go to state 30
    NE              shift and go to state 36


state 39

    (15) expr -> expr DIVIDE expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    RPAREN          reduce using rule 15 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 15 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 15 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 15 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 15 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 15 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 15 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 15 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 15 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 15 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 15 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 15 (expr -> expr DIVIDE expr .)
    END_LINE        reduce using rule 15 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 15 (expr -> expr DIVIDE expr .)
    VAR             reduce using rule 15 (expr -> expr DIVIDE expr .)
    WRITE           reduce using rule 15 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 24 ]
  ! DIVIDE          [ shift and go to state 23 ]
  ! MOD             [ shift and go to state 27 ]


state 40

    (14) expr -> expr TIMES expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    RPAREN          reduce using rule 14 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 14 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 14 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 14 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 14 (expr -> expr TIMES expr .)
    MOD             reduce using rule 14 (expr -> expr TIMES expr .)
    LT              reduce using rule 14 (expr -> expr TIMES expr .)
    LE              reduce using rule 14 (expr -> expr TIMES expr .)
    GT              reduce using rule 14 (expr -> expr TIMES expr .)
    GE              reduce using rule 14 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 14 (expr -> expr TIMES expr .)
    NE              reduce using rule 14 (expr -> expr TIMES expr .)
    END_LINE        reduce using rule 14 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 14 (expr -> expr TIMES expr .)
    VAR             reduce using rule 14 (expr -> expr TIMES expr .)
    WRITE           reduce using rule 14 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 24 ]
  ! DIVIDE          [ shift and go to state 23 ]
  ! MOD             [ shift and go to state 27 ]


state 41

    (12) expr -> expr PLUS expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    RPAREN          reduce using rule 12 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 12 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 12 (expr -> expr PLUS expr .)
    LT              reduce using rule 12 (expr -> expr PLUS expr .)
    LE              reduce using rule 12 (expr -> expr PLUS expr .)
    GT              reduce using rule 12 (expr -> expr PLUS expr .)
    GE              reduce using rule 12 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 12 (expr -> expr PLUS expr .)
    NE              reduce using rule 12 (expr -> expr PLUS expr .)
    END_LINE        reduce using rule 12 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 12 (expr -> expr PLUS expr .)
    VAR             reduce using rule 12 (expr -> expr PLUS expr .)
    WRITE           reduce using rule 12 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27

  ! TIMES           [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]


state 42

    (13) expr -> expr MINUS expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    RPAREN          reduce using rule 13 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 13 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 13 (expr -> expr MINUS expr .)
    LT              reduce using rule 13 (expr -> expr MINUS expr .)
    LE              reduce using rule 13 (expr -> expr MINUS expr .)
    GT              reduce using rule 13 (expr -> expr MINUS expr .)
    GE              reduce using rule 13 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 13 (expr -> expr MINUS expr .)
    NE              reduce using rule 13 (expr -> expr MINUS expr .)
    END_LINE        reduce using rule 13 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 13 (expr -> expr MINUS expr .)
    VAR             reduce using rule 13 (expr -> expr MINUS expr .)
    WRITE           reduce using rule 13 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27

  ! TIMES           [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]


state 43

    (16) expr -> expr MOD expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    RPAREN          reduce using rule 16 (expr -> expr MOD expr .)
    PLUS            reduce using rule 16 (expr -> expr MOD expr .)
    MINUS           reduce using rule 16 (expr -> expr MOD expr .)
    TIMES           reduce using rule 16 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 16 (expr -> expr MOD expr .)
    MOD             reduce using rule 16 (expr -> expr MOD expr .)
    LT              reduce using rule 16 (expr -> expr MOD expr .)
    LE              reduce using rule 16 (expr -> expr MOD expr .)
    GT              reduce using rule 16 (expr -> expr MOD expr .)
    GE              reduce using rule 16 (expr -> expr MOD expr .)
    EQUALS          reduce using rule 16 (expr -> expr MOD expr .)
    NE              reduce using rule 16 (expr -> expr MOD expr .)
    END_LINE        reduce using rule 16 (expr -> expr MOD expr .)
    WHILE           reduce using rule 16 (expr -> expr MOD expr .)
    VAR             reduce using rule 16 (expr -> expr MOD expr .)
    WRITE           reduce using rule 16 (expr -> expr MOD expr .)

  ! PLUS            [ shift and go to state 25 ]
  ! MINUS           [ shift and go to state 26 ]
  ! TIMES           [ shift and go to state 24 ]
  ! DIVIDE          [ shift and go to state 23 ]
  ! MOD             [ shift and go to state 27 ]


state 44

    (20) expr -> LPAREN expr RPAREN .

    RPAREN          reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    EQUALS          reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    END_LINE        reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    WHILE           reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    VAR             reduce using rule 20 (expr -> LPAREN expr RPAREN .)
    WRITE           reduce using rule 20 (expr -> LPAREN expr RPAREN .)


state 45

    (11) command -> WHILE LPAREN relexpr RPAREN LBRACKET . S RBRACKET
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) statement -> . declarations
    (10) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (11) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (6) declarations -> . VAR ID ASSIGN expr
    (7) declarations -> . VAR ID ASSIGN relexpr
    (8) declarations -> . VAR ID
    (9) declarations -> . WRITE LPAREN expr RPAREN

    WHILE           shift and go to state 3
    VAR             shift and go to state 7
    WRITE           shift and go to state 1

    declarations                   shift and go to state 2
    S                              shift and go to state 53
    command                        shift and go to state 5
    statement                      shift and go to state 6

state 46

    (25) relexpr -> expr EQUALS expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    END_LINE        reduce using rule 25 (relexpr -> expr EQUALS expr .)
    WHILE           reduce using rule 25 (relexpr -> expr EQUALS expr .)
    VAR             reduce using rule 25 (relexpr -> expr EQUALS expr .)
    WRITE           reduce using rule 25 (relexpr -> expr EQUALS expr .)
    RPAREN          reduce using rule 25 (relexpr -> expr EQUALS expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27


state 47

    (22) relexpr -> expr LE expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    END_LINE        reduce using rule 22 (relexpr -> expr LE expr .)
    WHILE           reduce using rule 22 (relexpr -> expr LE expr .)
    VAR             reduce using rule 22 (relexpr -> expr LE expr .)
    WRITE           reduce using rule 22 (relexpr -> expr LE expr .)
    RPAREN          reduce using rule 22 (relexpr -> expr LE expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27


state 48

    (10) command -> WHILE LPAREN expr RPAREN LBRACKET . S RBRACKET
    (1) S -> . statement S
    (2) S -> . statement END_LINE S
    (3) S -> . statement END_LINE
    (4) S -> . command
    (5) statement -> . declarations
    (10) command -> . WHILE LPAREN expr RPAREN LBRACKET S RBRACKET
    (11) command -> . WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET
    (6) declarations -> . VAR ID ASSIGN expr
    (7) declarations -> . VAR ID ASSIGN relexpr
    (8) declarations -> . VAR ID
    (9) declarations -> . WRITE LPAREN expr RPAREN

    WHILE           shift and go to state 3
    VAR             shift and go to state 7
    WRITE           shift and go to state 1

    declarations                   shift and go to state 2
    S                              shift and go to state 54
    command                        shift and go to state 5
    statement                      shift and go to state 6

state 49

    (21) relexpr -> expr LT expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    END_LINE        reduce using rule 21 (relexpr -> expr LT expr .)
    WHILE           reduce using rule 21 (relexpr -> expr LT expr .)
    VAR             reduce using rule 21 (relexpr -> expr LT expr .)
    WRITE           reduce using rule 21 (relexpr -> expr LT expr .)
    RPAREN          reduce using rule 21 (relexpr -> expr LT expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27


state 50

    (23) relexpr -> expr GT expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    END_LINE        reduce using rule 23 (relexpr -> expr GT expr .)
    WHILE           reduce using rule 23 (relexpr -> expr GT expr .)
    VAR             reduce using rule 23 (relexpr -> expr GT expr .)
    WRITE           reduce using rule 23 (relexpr -> expr GT expr .)
    RPAREN          reduce using rule 23 (relexpr -> expr GT expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27


state 51

    (24) relexpr -> expr GE expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    END_LINE        reduce using rule 24 (relexpr -> expr GE expr .)
    WHILE           reduce using rule 24 (relexpr -> expr GE expr .)
    VAR             reduce using rule 24 (relexpr -> expr GE expr .)
    WRITE           reduce using rule 24 (relexpr -> expr GE expr .)
    RPAREN          reduce using rule 24 (relexpr -> expr GE expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27


state 52

    (26) relexpr -> expr NE expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . MOD expr

    END_LINE        reduce using rule 26 (relexpr -> expr NE expr .)
    WHILE           reduce using rule 26 (relexpr -> expr NE expr .)
    VAR             reduce using rule 26 (relexpr -> expr NE expr .)
    WRITE           reduce using rule 26 (relexpr -> expr NE expr .)
    RPAREN          reduce using rule 26 (relexpr -> expr NE expr .)
    PLUS            shift and go to state 25
    MINUS           shift and go to state 26
    TIMES           shift and go to state 24
    DIVIDE          shift and go to state 23
    MOD             shift and go to state 27


state 53

    (11) command -> WHILE LPAREN relexpr RPAREN LBRACKET S . RBRACKET

    RBRACKET        shift and go to state 55


state 54

    (10) command -> WHILE LPAREN expr RPAREN LBRACKET S . RBRACKET

    RBRACKET        shift and go to state 56


state 55

    (11) command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET .

    $end            reduce using rule 11 (command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET .)
    RBRACKET        reduce using rule 11 (command -> WHILE LPAREN relexpr RPAREN LBRACKET S RBRACKET .)


state 56

    (10) command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET .

    $end            reduce using rule 10 (command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET .)
    RBRACKET        reduce using rule 10 (command -> WHILE LPAREN expr RPAREN LBRACKET S RBRACKET .)

